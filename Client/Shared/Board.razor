@using ClassHub.Client.Models
@using ClassHub.Client.Shared
@using ClassHub.Shared
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<style>
    .board-row:hover {
        background-color: rgba(0, 0, 0, 0.1);
    }

    .board-title:hover {
        color: #007bff;
        text-decoration: underline;
    }
</style>

<h3>@Title</h3>
<br />

<table class="table table-striped">
    <thead>
        <tr>
            <th style="width: 10%;">번호</th>
            @if (Title == "강의자료")
            {
                <th style="width: 10%;">주차</th>
            }
            <th style="width: 50%;">제목</th>
            <th style="width: 10%;">작성자</th>
            <th style="width: 10%;">게시일</th>
            <th style="width: 10%;">조회</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var content in pagedContents)
        {
            <tr class="notice-row" @onclick="@(() => ShowContents(content))" style="cursor:pointer;">
                <td style="text-indent : 7px;">@content.content_id</td>
                @if (Title == "강의자료")
                {
                    var lectureMaterial = content as ClassHub.Shared.LectureMaterial;
                    <td style="text-indent : 7px;">@lectureMaterial.week</td>
                }
                <td class="notice-title">@content.title</td>
                <td>@content.author</td>
                <td>@content.publish_date.ToString("yyyy.MM.dd")</td>
                <td style="text-indent : 7px;">@content.view_count</td>
            </tr>
        }
    </tbody>
</table>

<AuthorizeView Roles="professor">
<div class="row">
    <div class="col-12">
        <button class="btn btn-success float-end">등록</button>
    </div>
</div>
</AuthorizeView>

<div class="d-flex justify-content-center">
    <Pagination currentPage="currentPage" totalPages="totalPages" onPageChanged="OnPageChanged"></Pagination>
</div>

@code {
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public List<BoardContent> Contents { get; set; }

    private List<BoardContent> pagedContents = new List<BoardContent>();

    public int RoomId { get; set; }
    private int currentPage = 1;
    private int pageSize = 10; // 원하는 페이지당 표시할 항목 수를 설정합니다.
    private int totalPages = 0;

    protected override async void OnInitialized()
    {
        Contents = Contents.OrderByDescending(a => a.content_id).ToList(); // 공지 ID 기준 내림차순
        CalculateTotalPages();
        await LoadPageNumber();
        LoadPagedData();
        StateHasChanged();
    }

    private void ShowContents(BoardContent bc)
    {
        NavigationManager.NavigateTo(NavigationManager.Uri + $"/{bc.content_id}");
    }

    // Pagination.razor에서 currentPage가 변경되면 실행
    private async Task OnPageChanged(int newPage)
    {
        currentPage = newPage;
        await SavePaginationState();
        LoadPagedData();
    }

    /// <summary>
    /// 전체 페이지 수 계산
    /// </summary>
    private void CalculateTotalPages()
    {
        totalPages = (int)Math.Ceiling((double)Contents.Count / pageSize);
    }

    /// <summary>
    /// 현재 페이지의 공지사항 리스트 로딩
    /// </summary>
    private void LoadPagedData()
    {
        pagedContents = Contents.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    /// <summary>
    /// 세션 스토리지에 현재 페이지 번호를 저장
    /// </summary>
    private async Task SavePaginationState()
    {
        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "currentPage", currentPage);
    }

    /// <summary>
    /// 세션 스토리지에 저장된 현재 페이지 번호를 로딩
    /// </summary>
    private async Task LoadPageNumber()
    {
        var storedPage = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentPage");
        if (!string.IsNullOrEmpty(storedPage)) currentPage = int.Parse(storedPage);
    }
}
