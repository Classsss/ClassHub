@using ClassHub.Client.Shared.Modal;
@using ClassHub.Shared;
@using System.Text.RegularExpressions;
@inherits LayoutComponentBase
@inject AuthenticationService AuthService
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IModalService ModalService
@inject NavigationManager NavigationManager
@inject NavMenuTitleService NavMenuTitleService
@inject SSOAuthenticationStateProvider authProvider

<div class="page">
    @if(NavigationManager.Uri.Split('?')[0] != NavigationManager.BaseUri && NavigationManager.Uri.IndexOf(NavigationManager.BaseUri + "batcheditor") == -1) {
        <div class="sidebar">
            <NavMenu />
        </div>
    }

    <main>
        <div class="top-row px-4">
            @if (NavigationManager.Uri != NavigationManager.BaseUri)
            {
                <div class="NavTitle">
                    <span style="font-weight: bold; cursor : pointer;" @onclick="GoToRoomPage">@NavMenuTitleService.Title </span>
                </div>
            }
            <div class="left-time">
                <div style="float : left; text-align: center; margin-right : 10px;">
                    <p class="fw-bold" style="margin: auto; color:#0071C1">로그인 남은 시간</p>
                    <p style="margin: auto;">@TimeLeft</p>
                </div>
            </div>

            <a class="oi oi-bell Icon" aria-hidden="true" @onclick="OpenNotificationList"></a>
            <a class="oi oi-task Icon" aria-hidden="true" @onclick="OpenToDoList"></a>
            <a class="oi oi-envelope-closed Icon" aria-hidden="true" ></a>

            @if (userRole == "student") {
                <a class="title-name">@(userName) 학생</a>
            } else if (userRole == "professor") {
                <a class="title-name">@(userName) 교수</a>
            }
            
            <a class="oi oi-account-logout" aria-hiddn="true" style="transform: scaleY(-1); text-decoration: none;" href="@(NavigationManager.BaseUri + "login")" @onclick="Logout" target="_self"></a>

        </div>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    [Parameter]
    public bool IncludeSideBar { get; set; } = true;

    public string userName;
    public string userRole;
    public string TimeLeft { get; set; } = "10:00";

    private async void Logout()
    {
        NavigationManager.NavigateTo("/logout");
    }

    private async void OpenNotificationList() {
        var parameters = new ModalParameters();
        int student_id = int.Parse(await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userID"));
        parameters.Add("StudentId", student_id);
        var modalOptions = new ModalOptions() { Size = Blazored.Modal.ModalSize.Medium };
        var modalReference = ModalService.Show<NotificationModal>("알림 목록", parameters, modalOptions);

        var result = await modalReference.Result;
    }

    private async void OpenToDoList() {
        var parameters = new ModalParameters();
        int student_id = int.Parse(await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userID"));
        parameters.Add("StudentId", student_id);
        var modalOptions = new ModalOptions() { Size = Blazored.Modal.ModalSize.Medium };
        var modalReference = ModalService.Show<ToDoModal>("할 일 목록", parameters, modalOptions);

        var result = await modalReference.Result;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            // Monaco Editor가 있으면 크기를 알맞게 조절하는 함수 호출
            await JSRuntime.InvokeVoidAsync("updateEditorContainerWidth");
            await JSRuntime.InvokeVoidAsync("addResizeEventListener");

            await UpdateTimeLeft();
        }
    }

    protected override async Task OnParametersSetAsync() {
        base.OnParametersSet();
        string uri = NavigationManager.Uri;

        userName = await UserInfo.GetUserNameAsync(JSRuntime);
        userRole = await UserInfo.GetRoleAsync(JSRuntime);

        if(new Regex("/classroom/[0-9]+").IsMatch(uri)) {
            int start = uri.IndexOf("classroom");
            ClassRoom? classRoom = await Http.GetFromJsonAsync<ClassRoom>($"api/classroom/{uri.Substring(start).Split('/')[1]}");
            if(classRoom == null) NavMenuTitleService.Title = "";
            else NavMenuTitleService.Title = classRoom.title + $" ({classRoom.section_id.ToString("D4")})";
        } else {
            NavMenuTitleService.Title = "";
        }

        await UpdateTimeLeft();
    }

    private void GoToRoomPage() {
        string uri = NavigationManager.Uri;
        int start = uri.IndexOf("classroom");
        NavigationManager.NavigateTo(uri.Substring(start, 10) + uri.Substring(start).Split('/')[1]);
    }

    private async Task UpdateTimeLeft()
    {
        var endTimeString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "tokenExpireTime");

        if (!string.IsNullOrEmpty(endTimeString) && DateTime.TryParse(endTimeString, out var endTime))
        {
            while (DateTime.Now < endTime)
            {
                var timeRemaining = endTime - DateTime.Now;
                TimeLeft = $"{timeRemaining:mm\\:ss}"; // 시간을 mm:ss 형식으로 변환
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1000); // 1초마다 업데이트
            }
        }

        // 시간이 만료된 경우
        TimeLeft = "00:00";
        await InvokeAsync(StateHasChanged);
    }
}
