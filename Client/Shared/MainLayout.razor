@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject AuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject SSOAuthenticationStateProvider authProvider

<div class="page">
    @if(NavigationManager.Uri.Split('?')[0] != NavigationManager.BaseUri) {
        <div class="sidebar">
            <NavMenu />
        </div>
    }
    <main>
        <div class="top-row px-4">
            <a class="oi oi-envelope-closed" aria-hidden="true"></a>
            <a class="oi oi-bell" aria-hidden="true"></a>
            <a href="@(NavigationManager.BaseUri + "login")" @onclick="Logout" target="_self">Logout</a>
        </div>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>



@code {
    [Parameter]
    public bool IncludeSideBar { get; set; } = true;

    private async void Logout()
    {
        // 토큰을 제거하여 다음 로그인 시에도 로그인을 요구하도록 한다.
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "accessToken");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "refreshToken");
        AuthService.IsLoggedIn = false;
        authProvider.StateChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            // Monaco Editor가 있으면 크기를 알맞게 조절하는 함수 호출
            await JSRuntime.InvokeVoidAsync("updateEditorContainerWidth");
            await JSRuntime.InvokeVoidAsync("addResizeEventListener");
        }
    }
}
