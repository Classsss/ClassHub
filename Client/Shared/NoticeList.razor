@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using ClassHub.Shared

<style>
    .notice-row:hover {
        background-color: rgba(0, 0, 0, 0.1);
    }

    .notice-title:hover {
        color: #007bff;
        text-decoration: underline;
    }
</style>

<h3>공지사항</h3>
<br />
<table class="table table-striped">
    <thead>
        <tr>
            <th style="width: 10%;">번호</th>
            <th style="width: 50%;">제목</th>
            <th style="width: 15%;">작성자</th>
            <th style="width: 25%;">게시일</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var notice in notices) {
            <tr class="notice-row" @onclick="@(() => ShowNotice(notice))" style="cursor:pointer;">
                <td style="text-indent : 7px;">@notice.notice_id</td>
                <td class="notice-title">@notice.title</td>
                <td>@notice.author</td>
                <td>@notice.publish_date.ToString("yyyy.MM.dd")</td>
            </tr>
        }
    </tbody>
</table>

<div class="d-flex justify-content-center">
    <!--Pagination 컴포넌트 호출-->
    <Pagination currentPage="currentPage" totalPages="totalPages" onPageChanged="OnPageChanged"></Pagination>
</div>

@code {
    [Parameter]
    public List<Notice> notices { get; set; }

    private List<Notice> pagednotices = new List<Notice>();
    public int RoomId { get; set; }

    private int currentPage = 1;
    private int pageSize = 10; // 원하는 페이지당 표시할 항목 수를 설정합니다.
    private int totalPages = 0;

    // 페이지가 초기화되면 실행(페이지 진입, 새로고침, 공지보고오기 등)
    protected override async void OnInitialized() {
        notices = notices.OrderByDescending(a => a.notice_id).ToList(); // 공지 ID 기준 내림차순
        CalculateTotalPages();
        await LoadPageNumber();
        LoadPagedData();
        StateHasChanged();
    }

    // Pagination.razor에서 currentPage가 변경되면 실행
    private async Task OnPageChanged(int newPage) {
        currentPage = newPage;
        await SavePaginationState();
        LoadPagedData();
    }

    /// <summary>
    /// 전체 페이지 수 계산
    /// </summary>
    private void CalculateTotalPages() {
        totalPages = (int)Math.Ceiling((double)notices.Count / pageSize);
    }

    /// <summary>
    /// 현재 페이지의 공지사항 리스트 로딩
    /// </summary>
    private void LoadPagedData() {
        pagednotices = notices.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    /// <summary>
    /// 해당 공지사항 페이지로 이동
    /// </summary>
    private void ShowNotice(Notice notice) {
        Console.WriteLine($"{notice.notice_id}번 공지를 클릭하였습니다.");
        NavigationManager.NavigateTo(NavigationManager.Uri + $"/{notice.notice_id}");
    }

    /// <summary>
    /// 세션 스토리지에 현재 페이지 번호를 저장
    /// </summary>
    private async Task SavePaginationState()
    {
        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "currentPage", currentPage);
    }

    /// <summary>
    /// 세션 스토리지에 저장된 현재 페이지 번호를 로딩
    /// </summary>
    private async Task LoadPageNumber()
    {
        var storedPage = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentPage");
        if (!string.IsNullOrEmpty(storedPage)) currentPage = int.Parse(storedPage);
    }
}