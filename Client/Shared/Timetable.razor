@using ClassHub.Shared
@using System.Linq
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject NavMenuTitleService NavMenuTitleService

<style>
    .timetable td:first-child, .timetable th:first-child {
        width: 10%;
        height: 50px; /* 원하는 높이로 설정하세요. */
        text-align: center; /* 가운데 정렬 */
        vertical-align: middle; /* 수직 가운데 정렬 */
        white-space: nowrap; /* 텍스트가 한 줄로 유지되도록 설정 */
    }

    .timetable td, .timetable th {
        width: 15%; /* 90% / 5 (5개의 평일 요일) */
        height: 50px; /* 원하는 높이로 설정하세요. */
        text-align: center; /* 가운데 정렬 */
        vertical-align: middle; /* 수직 가운데 정렬 */
    }

    .timetable th {
        background-color: ghostwhite;
    }

    .btn {
        /* white-space: nowrap;  텍스트가 한 줄로 유지되도록 설정 */
        /* overflow: hidden;  넘치는 텍스트를 숨김 */
        text-overflow: ellipsis; /* 넘치는 텍스트를 "..."으로 표시 */
    }
    
    @@media (max-width: 800px) {
        .responsive-font, .button-text {
            font-size: 10px; /* 뷰포트 너비가 800px 이하일 때의 폰트 크기 */
        }
    }

    @@media (max-width: 600px) {
        .responsive-font, .button-text {
            font-size: 8px; /* 뷰포트 너비가 600px 이하일 때의 폰트 크기 */
        }
    }

    @@media (max-width: 400px) {
        .responsive-font, .button-text {
            font-size: 6px; /* 뷰포트 너비가 400px 이하일 때의 폰트 크기 */
        }
    }
</style>



@if(ClassRoomList == null) {
    <p><em>Loading...</em></p>
} else {
    <div class="responsive-font">
        <table class="table table-bordered timetable">
            <thead>
                <tr>
                    <th>Time</th>
                    @foreach(var dayOfWeek in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>().Where(d => d != DayOfWeek.Saturday && d != DayOfWeek.Sunday)) {
                        <th>@dayOfWeekKor[dayOfWeek]</th>
                    }
                </tr>
            </thead>
            <tbody>
                @for(int hour = StartHour; hour <= EndHour; hour++) {
                    <tr>
                        <td>@hour:00<br />(@((hour - StartHour + 1) + "교시"))</td>
                        @foreach(var dayOfWeek in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>().Where(d => d != DayOfWeek.Saturday && d != DayOfWeek.Sunday)) {
                            bool flag = true;
                            @foreach(var classRoom in ClassRoomList) {
                                @foreach(var timeSlot in classRoom.timeSlots.Where(t => t.day_of_week == dayOfWeek && t.start_time <= hour && hour < t.end_time)) {
                                    if(timeSlot.start_time != hour) {
                                        flag = false;
                                        break;
                                    }

                                    int span = timeSlot.end_time - timeSlot.start_time;
                                    <td rowspan=@span>
                                        <button class="btn btn-@colors[classRoom.color] btn-sm w-100 h-100 d-flex flex-column justify-content-start" @onclick="() => RoomSelected(classRoom)">
                                            <strong class="button-text">@classRoom.title</strong>
                                            <span class="button-text">@classRoom.buildingId</span>
                                        </button>
                                    </td>
                                    flag = false;
                                    break;
                                }
                            }
                            if(flag) {
                                <td />
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter]
    public List<ClassRoomDetail> ClassRoomList { get; set; }

    private Dictionary<DayOfWeek, string> dayOfWeekKor = new Dictionary<DayOfWeek, string> {
        {DayOfWeek.Monday, "월"},
        {DayOfWeek.Tuesday, "화"},
        {DayOfWeek.Wednesday, "수"},
        {DayOfWeek.Thursday, "목"},
        {DayOfWeek.Friday, "금"},
    };

    private string[] colors = { "primary", "secondary", "success", "danger", "warning", "info", "light", "dark" };

    // 시간표 시작 시간과 종료 시간을 설정하세요.
    private int StartHour => 9;
    private int EndHour => 19;

    private void RoomSelected(ClassRoomDetail classRoom) {
        // 해당 강의를 선택했을 때 수행할 작업을 정의하세요.
        Console.WriteLine($"Selected course: {classRoom.title}");
        NavigationManager.NavigateTo($"/classroom/{classRoom.room_id}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender) {
            await JSRuntime.InvokeVoidAsync("setUniformRowHeight");
        }
    }
}
