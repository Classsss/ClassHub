@inject NavigationManager NavigationManager
@using ClassHub.Shared

<WeekPicker weekValue="@selectedWeek" ValueChanged="OnWeekChanged" allowMultipleSelection=true/>
<br />

<div class="d-flex justify-content-between mb-2">
    <div class="d-flex align-items-center">
        <input type="text" class="form-control me-2" placeholder="제목">
        <button style="width: 40px; height: 40px; border: 0;" class="oi oi-magnifying-glass"></button>
    </div>
    <AuthorizeView Roles="professor">
        <button class="btn btn-success" @onclick="@(() => OpenEditor())">작성</button>
    </AuthorizeView>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th style="width: 10%;" @onclick="@(() => SortById())">번호 <i class=@((sortByIDAscending) ? "oi oi-sort-ascending" : "oi oi-sort-descending") /></th>
            <th style="width: 10%;">주차</th>
            <th style="width: 50%;">제목</th>
            <th style="width: 10%;">작성자</th>
            <th style="width: 10%;" >게시일</th>
            <th style="width: 10%;">조회</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var lec_mat in lecture_materials)
        {
            @if (selectedWeek.Contains(lec_mat.Week))
            {
                <tr class="matlec-row" @onclick="@(() => ShowLecMat(lec_mat))" style="cursor:pointer;">
                    <td style="text-indent : 7px;">@lec_mat.Id</td>
                    <td style="text-indent : 7px;">@lec_mat.Week</td>
                    <td class="notice-title">@lec_mat.Title</td>
                    <td>@lec_mat.Author</td>
                    <td>@lec_mat.PublishDate.ToString("yyyy.MM.dd")</td>
                    <td style="text-indent : 7px;">@lec_mat.ViewCount</td>
                </tr>
            }
        }
    </tbody>
</table>

<Pagination />

<style>
    .matlec-row:hover {
        background-color: rgba(0, 0, 0, 0.1);
    }

    .matlec-title:hover {
        color: #007bff;
        text-decoration: underline;
    }
</style>

@code {
    [Parameter]
    public List<LectureMaterial> lecture_materials { get; set; }

    [Parameter]
    public EventCallback<List<int>> ViewChanged { get; set; } //Week 값 변경 시 발생하는 콜백이벤트

    public List<int> selectedWeek = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 };

    public int RoomId { get; set; }

    //정렬을 위한 변수
    private bool sortByIDAscending = true;

    private void SortById() //강의자료 번호 순 정렬
    {
        if (!sortByIDAscending)
        {
            lecture_materials = lecture_materials.OrderByDescending(a => a.Id).ToList();
        }
        else
        {
            lecture_materials = lecture_materials.OrderBy(a => a.Id).ToList();
        }

        sortByIDAscending = !sortByIDAscending;
    }

    private void ShowLecMat(LectureMaterial lm)
    {
        NavigationManager.NavigateTo(NavigationManager.Uri + $"/{lm.Id}");
    }

    private void OpenEditor()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri + $"/0/edit");
    }

    protected override void OnParametersSet() // OninitializedAsync()를 대체함
    {
        lecture_materials = lecture_materials.OrderByDescending(a => a.Id).ToList();
        sortByIDAscending = true;
    }

    private async Task OnWeekChanged(List<int> week)
    {
        selectedWeek = week;
        await Task.CompletedTask;
    }
}