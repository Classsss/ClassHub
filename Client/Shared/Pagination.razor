@using ClassHub.Client.Models

<div class="d-flex justify-content-center">
    <nav aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item"><button class="page-link" @onclick="@(() => GoToPage(currentPage=1))">처음</button></li>
            <li class="page-item"><button class="page-link" @onclick="@(() => GoToPage(--currentPage))">이전</button></li>
            @for (int i = 1; i <= totalPages; i++)
            {
                int pageNumber = i;
                <li class="page-item @(currentPage == i ? "active" : "")">
                    <button class="page-link" @onclick="() => GoToPage(pageNumber)">@i</button>
                </li>
            }
            <li class="page-item"><button class="page-link" @onclick="@(() => GoToPage(++currentPage))">다음</button></li>
            <li class="page-item"><button class="page-link" @onclick="@(() => GoToPage(currentPage=totalPages))">끝</button></li>
        </ul>
    </nav>
</div>

@code {

    /// <summary> 현재 페이지 </summary>
    [Parameter] public int currentPage { get; set; }
    /// <summary> 총 페이지 수 </summary>
    [Parameter] public int totalPages { get; set; }
    /// <summary> Pagination의 currentPage가 변경되면 발생하는 이벤트 </summary>
    [Parameter] public EventCallback<int> onPageChanged { get; set; }

    /// <summary>
    /// 현재 페이지 번호를 target으로 변경하고 상태 변경 이벤트를 발생시킵니다.
    /// </summary>
    public async Task GoToPage(int target) {
        if (target < 1) { target = 1; }
        if (target > totalPages) { target = totalPages; }
        if(0 < target || target <= totalPages) await onPageChanged.InvokeAsync((currentPage = target));
    }
}