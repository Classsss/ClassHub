@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime

<style>
    .drop-zone {
        border: 3px dashed #000;
        border-radius: 10px;
        padding: 30px 0;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }

    .text-zone {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        width: 100%;
    }
</style>

    
<div class="drop-area border border-3 rounded p-3 text-center position-relative" @ondragenter="OnDragEnter" @ondragleave="OnDragLeave" @ondragover="OnDragOver">
    <div class="drop-zone position-relative w-100 h-100">
        <div class="text-zone">
            <p class="m-0">파일을 여기로 드래그 앤 드롭하거나 클릭하여 선택하세요.</p>
        </div>
            <InputFile OnChange="OnDrop" class="position-absolute w-100 h-100" style="opacity: 0; cursor: pointer; top: 0; left: 0;" multiple />
            <InputFile @ref="inputFile" OnChange="OnDrop" class="position-absolute w-100 h-100" style="opacity: 0; cursor: pointer; top: 0; left: 0;" multiple />
    </div>
    <!-- 파일 목록 표시 영역 -->
    @if(DroppedFiles.Count > 0) {
        <div class="p-3">
            @foreach(var file in DroppedFiles) {
                <div class="border p-2 my-2 d-flex justify-content-between align-items-center">
                    <span>@file.Name (Size: @file.Size bytes)</span>
                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveFile(file)">X</button>
                </div>
            }
        </div>
    }
</div>


@code {
    [Parameter]
    public List<IBrowserFile> DroppedFiles { get; set; }

    [Parameter]
    public EventCallback<List<IBrowserFile>> DroppedFilesChanged { get; set; }

    [Parameter]
    public bool IsMultiple { get; set; }

    private InputFile inputFile;

    private void OnDragEnter(DragEventArgs e) {
        // 드래그 대상이 드롭 대상의 위로 드래그 될 때 발생합니다. 
        // 이 이벤트를 사용하여 드롭 대상에 대한 시각적 효과를 적용하거나 드롭을 허용할지 여부를 결정하는 로직을 실행할 수 있습니다.
        e.DataTransfer.DropEffect = "copy";
    }

    private void OnDragLeave(DragEventArgs e) {
        // 드래그 대상이 드롭 대상의 위에서 벗어날 때 발생합니다. 
        // \이 이벤트를 사용하여 드롭 대상에 적용된 시각적 효과를 제거하거나 드롭을 취소하는 로직을 실행할 수 있습니다.
    }

    private Task OnDragOver(DragEventArgs e) {
        // 드래그 대상이 드롭 대상 위에 있을 때 지속적으로 발생합니다. 
        // 이 이벤트를 사용하여 드롭이 허용되는지 여부를 확인하거나 드롭 효과를 설정할 수 있습니다. 
        // 기본적으로 대부분의 요소에서 드롭은 금지되어 있으므로, 이 이벤트에서 기본 동작을 막아야 드롭을 허용할 수 있습니다.
        e.DataTransfer.DropEffect = "copy";
        return Task.CompletedTask;
    }

    private void OnDrop(InputFileChangeEventArgs e) {
        // 드래그 대상이 드롭 대상 위에 드롭될 때 발생합니다. (파일을 끌고 와서 마우스를 놓는 타이밍)
        // 이 이벤트를 사용하여 드롭된 데이터를 처리하고, 드롭 완료 후 시각적 효과를 제거하거나 추가 작업을 수행할 수 있습니다.
        // 드롭된 파일 데이터는 브라우저 메모리에 임시적으로 저장됩니다. 
        // 이 데이터는 서버에 전송되지 않고, 페이지가 새로 고쳐지거나 브라우저가 닫히면 삭제됩니다. 
        // 따라서 이 파일 데이터를 서버에 영구적으로 저장하려면, 추가적인 처리가 필요합니다.

        if (IsMultiple == true)
        {
            foreach (var file in e.GetMultipleFiles())
            {
                // 파일 처리 로직을 여기에 추가하세요.
                Console.WriteLine($"파일 이름: {file.Name}, 크기: {file.Size}");
            }

            DroppedFiles.AddRange(e.GetMultipleFiles());

            StateHasChanged();  // UI를 갱신합니다.

            DroppedFilesChanged.InvokeAsync(DroppedFiles);

        } else {
            DroppedFiles.Clear();
            if (e.FileCount > 0) {
                DroppedFiles.Add(e.File);
                DroppedFilesChanged.InvokeAsync(DroppedFiles);
            }
        }
    }


    private async void RemoveFile(IBrowserFile file) {
        DroppedFiles.Remove(file);
        await JSRuntime.InvokeVoidAsync("resetInputFile", inputFile.Element);
        StateHasChanged();  // UI를 갱신합니다.
    }
}