@using Microsoft.AspNetCore.Components.Forms

<!--TODO : 디자인 개선 필요-->
<div class="drop-area border border-3 border-dashed rounded p-3 text-center position-relative"
     @ondragenter="OnDragEnter"
     @ondragleave="OnDragLeave"
     @ondragover="OnDragOver">
    <p>파일을 여기로 드래그 앤 드롭하거나 클릭하여 선택하세요.</p>
    <InputFile OnChange="OnDrop" class="position-absolute w-100 h-100" style="opacity: 0; cursor: pointer; top: 0; left: 0;" multiple />
</div>

@code {
    private void OnDragEnter(DragEventArgs e) {
        // 드래그 대상이 드롭 대상의 위로 드래그 될 때 발생합니다. 
        // 이 이벤트를 사용하여 드롭 대상에 대한 시각적 효과를 적용하거나 드롭을 허용할지 여부를 결정하는 로직을 실행할 수 있습니다.
        e.DataTransfer.DropEffect = "copy";
    }

    private void OnDragLeave(DragEventArgs e) {
        // 드래그 대상이 드롭 대상의 위에서 벗어날 때 발생합니다. 
        // \이 이벤트를 사용하여 드롭 대상에 적용된 시각적 효과를 제거하거나 드롭을 취소하는 로직을 실행할 수 있습니다.
    }

    private Task OnDragOver(DragEventArgs e) {
        // 드래그 대상이 드롭 대상 위에 있을 때 지속적으로 발생합니다. 
        // 이 이벤트를 사용하여 드롭이 허용되는지 여부를 확인하거나 드롭 효과를 설정할 수 있습니다. 
        // 기본적으로 대부분의 요소에서 드롭은 금지되어 있으므로, 이 이벤트에서 기본 동작을 막아야 드롭을 허용할 수 있습니다.
        e.DataTransfer.DropEffect = "copy";
        return Task.CompletedTask;
    }

    private async Task OnDrop(InputFileChangeEventArgs e) {
        // 드래그 대상이 드롭 대상 위에 드롭될 때 발생합니다. (파일을 끌고 와서 마우스를 놓는 타이밍)
        // 이 이벤트를 사용하여 드롭된 데이터를 처리하고, 드롭 완료 후 시각적 효과를 제거하거나 추가 작업을 수행할 수 있습니다.

        // 드롭된 파일 데이터는 브라우저 메모리에 임시적으로 저장됩니다. 
        // 이 데이터는 서버에 전송되지 않고, 페이지가 새로 고쳐지거나 브라우저가 닫히면 삭제됩니다. 
        // 따라서 이 파일 데이터를 서버에 영구적으로 저장하려면, 추가적인 처리가 필요합니다.
        foreach(var file in e.GetMultipleFiles()) {
            // 파일 처리 로직을 여기에 추가하세요.
            Console.WriteLine($"파일 이름: {file.Name}, 크기: {file.Size}");
        }
    }
}