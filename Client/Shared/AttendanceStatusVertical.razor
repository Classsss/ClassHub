@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using ClassHub.Shared

<div class="row">
    <div class="col-auto summary" style="background-color: #f1f1f1; border-radius: 5px; border: 1px solid #ccc;">
        <span style="font-weight:bold;">출결 상태 : </span>
        <span>
            <span>출석 <span style="color: green;">30</span></span> | <span>지각 <span style="color: orange;">0</span></span> | 결석 <span style="color: red;">0</span> | 미결 <span style="color: gray;">0</span> | 예정 <span style="color: blue;">0</span></span>
        <br />
        <span style="font-weight:bold;">학습 상태 : </span>
        <span>완료 <span style="color: green;">101</span> | 미완료 <span style="color: gray;">16</span> | 예정 <span style="color: blue;">0</span></span>
    </div>
</div>
<br />

@foreach (var item in attendanceStatus.GroupBy(x => new { x.Week })) {
    <i class="oi oi-calendar" style="font-weight:bold; font-size:18px; margin-bottom:10px;">@(" " + item.Key.Week)주차</i>
    <div class="table-responsive">
        <table class="table table-bordered table-hover align-middle" style="text-align: center;">
            <thead style="font-size: 120%; font-weight: bold;">
                <tr>
                    <th style="width: 50%;">학습 내용</th>
                    <th style="width: 20%;">학습 유형</th>
                    <th style="width: 15%;">완료 여부</th>
                    <th style="width: 15%;">상세</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var subItem in item)
                {
                    <tr>
                        <td>@subItem.Title</td>
                        <td>@subItem.LearningType</td>
                        <td class="@(getClassForAttendanceStatus(subItem.AttendProgress))">
                            @if (subItem.AttendProgress == "출석"){
                                <i class="mobile-icon oi oi-circle-check" />
                            } else if (subItem.AttendProgress == "미출석"){
                                <i class="mobile-icon oi oi-x" />
                            } else if (subItem.AttendProgress == "완료"){
                                <i class="mobile-icon oi oi-circle-check" />
                            } else if (subItem.AttendProgress == "미완료") {
                                <i class="mobile-icon oi oi-x" />
                            }
                            <span class="desktop">@(" " + subItem.AttendProgress)</span>
                        </td>
                        <td>
                            @if(subItem.DetailLink != null) {
                                <button style="border:0; height:auto; font-size:12px; background-color:#F2F2F2; color:#737373" class="btn btn-secondary oi oi-arrow-circle-right" @onclick="(e) => toDetail(subItem.DetailLink)"><span class="desktop">@(" " + "확인")</span></button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <br />

}

<style>
    .attendance-status-yes{
        background-color: #E7F0FD !important;
        color: #1659EA !important;
    }

    .attendance-status-no {
        background-color: #FCFFE5 !important;
        color: #C2B20C !important;
    }

    .attendance-status-no-target {
        background-color: #F1F1F1 !important;
        color: #8C8C8C !important;
    }

    .learning-status-yes {
        background-color: #F4FFF2 !important;
        color: #248F0B !important;
    }

    .learning-status-no {
        background-color: #FF8A8A !important;
        color: #8C3032 !important;
    }

    @@media (min-width: 1200px) {
        table {
            font-size: 14px;
        }
    }

    @@media (max-width: 1200px) {
        table {
            font-size: calc(7px + 1vw);
        }
    }

    @@media (max-width: 900px) {
        .desktop {
            display: none;
        }

        .mobile-icon {
            font-size:15px;
        }

        .summary {
            font-size: calc(2vw);
        }
    }

    @@media (min-width: 900px) {
        .mobile {
            display: none;
        }
    }
</style>

@code {
    [Parameter]
    public int roomId { get; set; } //강의실 번호
    [Parameter]
    public int MaxCount { get; set; } = 10;

    //출결 항목 리스트
    public List<AttendanceItem> attendanceStatus = new List<AttendanceItem>() { };

    protected override async void OnInitialized() {
        int student_id = await UserInfo.GetUserIdAsync(JSRuntime);
        var result = await Http.GetFromJsonAsync<List<AttendanceItem>>($"api/classroom/attendent?room_id={roomId}&student_id={student_id}&base_uri={NavigationManager.BaseUri}");

        foreach(var i in result) {
            var k = new AttendanceItem { Week = i.Week, Title = i.Title, LearningType = i.LearningType, AttendProgress = i.AttendProgress, DetailLink = i.DetailLink };

            attendanceStatus.Add(k);
        }

        StateHasChanged();
    }

    //해당 status의 값에 따라 태그의 클래스 이름을 부여한다
    string getClassForAttendanceStatus(string status) {
        if (status == "완료"){
            return "learning-status-yes";
        } else if (status == "미완료"){
            return "learning-status-no";
        } else if (status == "출석") {
            return "attendance-status-yes";
        } else if (status == "미출석") {
            return "attendance-status-no";
        } else {
            return "attendance-status-no-target";
        }
    }

    public void toDetail(string url) {
        Console.WriteLine(url);
        var baseUrl = NavigationManager.BaseUri;
        NavigationManager.NavigateTo(baseUrl + url);
    }
}