@using System
@using Blazored.Modal
@using Blazored.Modal.Services
@using ClassHub.Client.Models;
@using ClassHub.Shared;
@using System.Text.Json
@using System.Text
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<Modal>
    <ModalBody>
        @if (!dataLoaded) {
            <LoadingBar />
        } else {
        <table class="table table-striped table-hover" style="text-align: center;">
            <thead class="table-light">
                <tr>
                    <th style="width:10%">학번/이름</th>
                    @foreach (var item in lectures) {
                        <th>@(" " + item.Week)주차 @(item.Chapter)차시</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var (student, i) in students.Select((s, i) => (s, i))) {
                    <tr>
                        <td style="vertical-align: middle;">@student.student_id<br />@student.name</td>
                        @foreach (var (lecture, j) in lectures.Select((l, j) => (l, j))) {
                            <td class="@(enrolledList[i][j] ? "enrolled" : "not-enrolled")" style="font-weight:bold; width:10%;">
                                <i class="@(enrolledList[i][j] ? "oi oi-circle-check" : "oi oi-x")"></i>
                                @(enrolledList[i][j] ? "수강" : "미수강")
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
        }
    </ModalBody>
    <ModalFooter>
        <div style="margin-top: 10px;">
            <button class="btn btn-success" @onclick="HandleClose">닫기</button>
        </div>
    </ModalFooter>
</Modal>

<style>
    .enrolled {
        background-color: #E7F0FD !important;
        color: #1659EA !important;
    }

    .not-enrolled {
        background-color: #FCFFE5 !important;
        color: #C2B20C !important;
    }
</style>
<style>
    .enrolled {
        border: 1px solid darkgray;
        background-color: #E7F0FD !important;
        color: #1659EA !important;
    }

    .not-enrolled {
        border: 1px solid darkgray;
        background-color: #FCFFE5 !important;
        color: #C2B20C !important;
    }
</style>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] 
    public List<Models.Lecture> lectures { get; set; }
    [Parameter]
    public int RoomId { get; set; }
    [Parameter]
    public List<Student> students { get; set; }

    List<List<bool>> enrolledList = new List<List<bool>>();
    bool dataLoaded = false;

    protected override async Task OnInitializedAsync() {
        for (int i = 0; i < students.Count; i++) {
            var studentEnrollment = new List<bool>();
            for (int j = 0; j < lectures.Count; j++) {
                bool is_enroll = await IsEnrolled(students[i], lectures[j]);

                studentEnrollment.Add(is_enroll);
            }
            enrolledList.Add(studentEnrollment);
        }
        dataLoaded = true;
    } 

    public async Task<bool> IsEnrolled(Student student, Models.Lecture lecture) {
        bool is_enrolled = await Http.GetFromJsonAsync<bool>($"api/lecture/isenrolled/room_id/{RoomId}/lecture_id/{lecture.LectureId}/student_id/{student.student_id}");
        return is_enrolled;
    }

    // 동영상 강의 등록창을 종료한다.
    private async Task HandleClose(){
        await ModalInstance.CloseAsync();
    }

}


 