@page "/logout"
@inject AuthenticationService AuthService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject SSOAuthenticationStateProvider authProvider


@code {
    private string? errorMessage;

    protected async override void OnInitialized()
    {
        if (AuthService.IsLoggedIn) {
            AuthService.IsLoggedIn = false;
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        } else {
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "accessToken");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "refreshToken");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "userID");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "Name");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "Role");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "tokenExpireTime");

            authProvider.StateChanged();

            NavigationManager.NavigateTo(NavigationManager.BaseUri + "login");

            errorMessage = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "errorMessage");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "errorMessage");

            if (errorMessage != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
                
            } else {
                await JSRuntime.InvokeVoidAsync("alert", "로그아웃 되었습니다.");
            }
        }
        
    }
}