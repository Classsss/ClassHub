@page "/classroom/{roomid:int}/week/{week:int}/chapter/{chapter:int}"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using ClassHub.Shared
@using ClassHub.Client.Models
@using System.Text.Json
@using System.Text
@using Microsoft.AspNetCore.WebUtilities
@using System.Collections.Generic
@using Microsoft.AspNetCore.SignalR.Client

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
@if (!dataLoaded) {
    <LoadingBar />
} else {
    <div class="container-fluid d-flex justify-content-between" style="height: 100vh; width: 100vw">
        <div id="sidebar" style= " width : 15%; height : 100%;">
            <div class="card bg-dark text-white">
                <div class="card-header d-flex justify-content-between">
                    <h5 class="mb-0">@(Week)주차 강의</h5>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var lecture in lectures) {
                        <a class="list-group-item list-group-item-action @(lecture.Chapter == Chapter ? "active" : "")" @onclick="@(() => ShowLecture(lecture.Chapter))" style="cursor:pointer;">@lecture.Title</a>
                    }
                </ul>
            </div>
        </div>
        <div class="card-body p-0  bg-dark ">
                <video style="width: 100%; height: 95%;" controls>
                    <source src=@SelectedLecture.VideoUrl type="video/mp4">
                    Your browser does not support the video tag.
                </video>
                <div class="d-flex justify-content-end p-2 bg-secondary" style="height: 5%">
                    <button class="btn btn-light btn-sm" style="margin-right : 5px" @onclick="@(() => ShowLecture(Chapter - 1))" disabled="@IsPrevDisabled">이전</button>
                    <button class="btn btn-light btn-sm" style="margin-right : 5px" @onclick="@(() => ShowLecture(Chapter + 1))" disabled="@IsNextDisabled">다음</button>
                    <button class="btn btn-light btn-sm" style="margin-right : 5px" @onclick="GoBack">종료</button>
                </div>
            </div>
    </div>
}
       
<style>

    #sidebar {
        width: 30%;
        background-color: grey;
    }

        #sidebar .list-group-item.active {
            background-color: #007bff;
            color: white;
        }

        #sidebar .d-flex {
            background-color: #333;
            padding: 10px;
            color: white;
            font-size: 18px;
        }

        #sidebar button {
            color: white;
            background-color: transparent;
            border: none;
            font-size: 18px;
            cursor: pointer;
        }
</style>





@code {
    [Parameter]
    public int RoomId { get; set; }
    [Parameter]
    public int Week { get; set; }
    [Parameter]
    public int Chapter { get; set; }

    private List<Models.Lecture> lectures = new List<Models.Lecture>();
    private Models.Lecture SelectedLecture { get; set; }
    HubConnection connection;
    private string role;
    bool dataLoaded = false;
    private bool IsPrevDisabled => lectures.FirstOrDefault(lecture => lecture.Chapter == Chapter - 1) == null;
    private bool IsNextDisabled => lectures.FirstOrDefault(lecture => lecture.Chapter == Chapter + 1) == null;

    //const string CLASSHUB_UPDATE_LECTUREPROGRESS = "https://classhub.azurewebsites.net/lecturehub";
    const string CLASSHUB_UPDATE_LECTUREPROGRESS = "https://localhost:7182/lecturehub";


    protected async override void OnInitialized(){   
        role = await UserInfo.GetRoleAsync(JSRuntime);
        await CheckExistProgress();
        SetSignalRConnection();
        dataLoaded = true;
    }

    protected override async Task OnInitializedAsync() {
        // 쿼리 파라메터를 통해 해당 주차 영상들을 불러온다.
        var uri = new Uri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        var lecturesJson = query["lectures"].ToString();
        if (!string.IsNullOrWhiteSpace(lecturesJson)) {
            lectures = JsonSerializer.Deserialize<List<Models.Lecture>>(Uri.UnescapeDataString(lecturesJson));
        } 
        // signalR 연결 끊는 함수를 등록한다
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    protected async Task CheckExistProgress() {
        if (role == "student"){
            await Http.PostAsync($"api/lecture/hasprogress/room_id/{RoomId}/lecture_id/{SelectedLecture.LectureId}/student_id/{await UserInfo.GetUserIdAsync(JSRuntime)}/student_name/{await UserInfo.GetUserNameAsync(JSRuntime)}", null);
        }
    }

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
        SelectedLecture = lectures.FirstOrDefault(lecture => lecture.Chapter == Chapter);

    }

    // 랜더링이 끝난 후에는 signalR함수를 호출한다.
    protected override async Task OnAfterRenderAsync(bool firstRender){
        if (firstRender){
            await base.OnAfterRenderAsync(firstRender);

        }
    }

    //signalR 연결하는 함수
    protected async Task SetSignalRConnection() {
        //교수가 아닌 학생이면서 종료기간이 덜 지났을때만 기록한다.
        if (role == "student" && TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Asia/Seoul")) < SelectedLecture.EndDate && TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Asia/Seoul")) > SelectedLecture.StartDate) {
            connection = new HubConnectionBuilder()
           .WithUrl(CLASSHUB_UPDATE_LECTUREPROGRESS)
           .Build();
            await connection.StartAsync();
            await connection.InvokeAsync("UpdateLectureProgressWatcher", SelectedLecture.LectureId, await UserInfo.GetUserIdAsync(JSRuntime));
        }
    }

    //페이지 옮기기 새로고침 등을 하면 signalR 연결을 끊는다.
    private async void HandleLocationChanged(object sender, LocationChangedEventArgs e) {
        if (connection != null){
            await connection.StopAsync();
        }
    }

    // 뒤로가기 버튼
    private async Task GoBack(){
        await JSRuntime.InvokeVoidAsync("goBack");
    }   

    // 선택한 강의를 보여주는 함수
    private async Task ShowLecture(int chapter) {
        // 원래 있던 연결을 끊고 다시 한다.
        if (connection != null) {
            await connection.StopAsync();
        }

        // 선택한 강의로 갱신한다
        var selectedLecture = lectures.FirstOrDefault(lecture => lecture.Chapter == chapter);
        if (selectedLecture == null) return;
        Chapter = chapter;
        SelectedLecture = lectures.FirstOrDefault(lecture => lecture.Chapter == chapter);
        await CheckExistProgress();
        await JSRuntime.InvokeVoidAsync("reloadVideo");
        SetSignalRConnection();
        StateHasChanged();
    }

}
