@using Blazored.Modal
@using Blazored.Modal.Services
@using ClassHub.Client.Models
@inject IJSRuntime JSRuntime
@inject Blazored.Modal.Services.IModalService ModalService

<Modal>
    <ModalContent>
        <div class="form-group">
            <label for="description">내용</label>
            <input type="text" class="form-control" id="description" @bind="description">
        </div>
        <p></p>
        <div class="form-group">
            <label for="score">점수</label>
            <input type="number" class="form-control" id="score" @bind="score">
        </div>
        <p></p>
        <div class="form-group">
            <label for="type">문제 유형</label>
            <select class="form-control" id="type" @bind="type">
                <option value="MultipleChoiceProblem">객관식</option>
                <option value="ShortAnswerProblem">단답형</option>
                <option value="CodeProblem">코드형</option>
            </select>
        </div>
        <p></p>
        <div>
            @if (type == "MultipleChoiceProblem") {
                <div class="card mb-4">
                    <div class="card-header">
                        보기 목록
                    </div>
                    <div class="card-body">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>보기 내용</th>
                                    <th>수정</th>
                                    <th>제거</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var question in multipleChoiceQuestions.Select((value, index) => new { Value = value, Index = index })) {
                                    <tr style="vertical-align: middle;">
                                        <td>@question.Value</td>
                                        <td>
                                            <button class="btn btn-sm" @onclick="() => ModifyQuestion(question.Index, question.Value)">
                                                <i class="oi oi-pencil" style="background-color: transparent; color: black;" />
                                            </button>
                                        </td>
                                        <td>
                                            <button class="btn btn-sm" @onclick="() => DeleteQuestion(question.Index, question.Value)">
                                                <i class="oi oi-x" style="background-color: transparent; color: red;" />
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="card-footer d-flex justify-content-end">
                        <button class="btn btn-primary" @onclick="AddQuestion">
                            <i class="oi oi-plus" />
                        </button>
                    </div>
                </div>
            } else if (type == "ShortAnswerProblem") {
                
            } else if (type == "CodeProblem") {
                
            }
        </div>
        <p></p>
    </ModalContent>
    <ModalFooter>
        <button class="btn btn-primary" @onclick="SaveAndCloseModal">저장</button>
        <button class="btn btn-secondary" @onclick="CloseModal">취소</button>
    </ModalFooter>
</Modal>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public ExamProblem Problem { get; set; }

    // MonacoEditor 컴포넌트 참조 변수
    private MonacoEditor? ExampleCodeEditor;
    private MonacoEditor? AnswerCodeEditor;

    private string description = string.Empty;
    private string type = "MultipleChoiceProblem";
    private int score = 0;

    private List<string> multipleChoiceQuestions = new List<string>();
    private int multipleChoiceAnswer;

    private string shortAnswer = string.Empty;

    private string? exampleCode = null;
    private string? answerCode = null;

    protected override async Task OnInitializedAsync() {
        if (Problem == null) return;

        description = Problem.Description;
        type = Problem.GetType().Name;
        score = Problem.Score;

        switch (type) {
            case "MultipleChoiceProblem":
                MultipleChoiceProblem multipleChoiceProblem = (MultipleChoiceProblem)Problem;
                if (multipleChoiceProblem != null) {
                    multipleChoiceQuestions = multipleChoiceProblem.Questions.ToList();
                    multipleChoiceAnswer = multipleChoiceProblem.Answer;
                }
                break;
            case "ShortAnswerProblem":
                ShortAnswerProblem shortAnswerProblem = (ShortAnswerProblem)Problem;
                if (shortAnswerProblem != null) {
                    shortAnswer = shortAnswerProblem.Answer;
                }
                break;
            case "CodeProblem":
                CodeProblem codeProblem = (CodeProblem)Problem;
                if (codeProblem != null) {
                    exampleCode = codeProblem.Example;
                    answerCode = codeProblem.Answer;
                }
                break;
        }
    }

    private async Task AddQuestion() {
        var parameters = new ModalParameters();
        parameters.Add("Question", string.Empty);
        var modalOptions = new ModalOptions() { Size = Blazored.Modal.ModalSize.ExtraLarge, DisableBackgroundCancel = true };
        var modalReference = ModalService.Show<MultipleChoiceQuestionModal>("보기 추가", parameters, modalOptions);

        var result = await modalReference.Result;
        if (result.Confirmed && result.Data != null) {
            string? question = result.Data.ToString();
            if (question != null) {
                multipleChoiceQuestions.Add(question);
            }
        }
    }

    private async Task ModifyQuestion(int index, string selectedQuestion) {
        var parameters = new ModalParameters();
        parameters.Add("Question", selectedQuestion);
        var modalOptions = new ModalOptions() { Size = Blazored.Modal.ModalSize.ExtraLarge, DisableBackgroundCancel = true };
        var modalReference = ModalService.Show<MultipleChoiceQuestionModal>("보기 수정", parameters, modalOptions);

        var result = await modalReference.Result;
        if (result.Confirmed && result.Data != null) {
            string? question = result.Data.ToString();
            if (question != null) {
                if (index != -1) {
                    multipleChoiceQuestions[index] = question;
                    StateHasChanged();
                }
            }
        }
    }

    private async Task DeleteQuestion(int index, string selectedQuestion) {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "해당 문제가 제거됩니다.");
        if (confirmed) {
            if (selectedQuestion != null) {
                if (index != -1) {
                    multipleChoiceQuestions.RemoveAt(index);
                }
            }
        } else {
            return;
        }
    }

    private async Task SaveAndCloseModal() {
        if (description == string.Empty) {
            await JSRuntime.InvokeVoidAsync("alert", "내용을 입력하세요.");
            return;
        }

        ExamProblem problem = null;

        switch (type) {
            case "MultipleChoiceProblem":
                problem = new MultipleChoiceProblem();
                break;
            case "ShortAnswerProblem":
                problem = new ShortAnswerProblem();
                break;
            case "CodeProblem":
                problem = new CodeProblem();
                break;
        }

        if (problem != null) {
            problem.Description = description;
            problem.Score = score;

            await ModalInstance.CloseAsync(ModalResult.Ok(problem));
        }
    }

    private async Task CloseModal() {
        await ModalInstance.CloseAsync();
    }
}


 