@using Blazored.Modal
@using Blazored.Modal.Services
@using ClassHub.Client.Models
@inject IJSRuntime JSRuntime
@inject Blazored.Modal.Services.IModalService ModalService

<Modal>
    <ModalContent>
        <div class="card mb-4">
            <div class="card-header">
                <label for="description">내용</label>
            </div>
            <div class="card-body">
                <input type="text" class="form-control" id="description" placeholder="내용을 입력하세요." @bind="description">
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <label for="score">점수</label>
            </div>
            <div class="card-body">
                <input type="number" class="form-control" id="score" placeholder="숫자만 입력 가능합니다." @bind="score">
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <label for="type">문제 유형</label>
            </div>
            <div class="card-body">
                <select class="form-select" id="type" @bind="type">
                    <option value="MultipleChoiceProblem">객관식</option>
                    <option value="ShortAnswerProblem">단답형</option>
                    <option value="CodingProblem">코드형</option>
                </select>
            </div>
        </div>
        <p></p>
        <div>
            @if (type == "MultipleChoiceProblem") {
                <div class="card mb-4">
                    <div class="card-header">
                        보기 목록
                    </div>
                    <div class="card-body">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th width="90%">보기 내용</th>
                                    <th>수정</th>
                                    <th>제거</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var choice in multipleChoices.Select((value, index) => new { Value = value, Index = index })) {
                                    <tr style="vertical-align: middle;">
                                        <td>
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="multipleChoice" id="@choice.Index" value="@choice.Value.Description" checked="@(multipleChoiceAnswer == choice.Value.Description)" @onchange="OnAnswerSelected" />
                                                <label class="form-check-label" for="@choice.Index">
                                                    @{
                                                        string modifiedQuestion = choice.Value.Description;
                                                        if (modifiedQuestion.Length > maxDisplayLength) {
                                                            modifiedQuestion = $"{modifiedQuestion.Substring(0, maxDisplayLength)}..."; // 일정 길이 이상일 경우 일부만 표시
                                                        }
                                                    }
                                                    <span>@modifiedQuestion</span>
                                                    @if (choice.Value.Description.Length > maxDisplayLength) {
                                                        // 일정 길이 이상일 경우 "더 보기" 버튼 추가
                                                        <button class="btn btn-link" @onclick="() => ShowFullContent(choice.Value.Description)">더 보기</button>
                                                    }
                                                </label>
                                            </div>
                                        </td>
                                        <td>
                                            <button class="btn btn-sm" @onclick="() => ModifyChoice(choice.Index, choice.Value)">
                                                <i class="oi oi-pencil" style="background-color: transparent; color: black;" />
                                            </button>
                                        </td>
                                        <td>
                                            <button class="btn btn-sm" @onclick="() => DeleteChoice(choice.Index, choice.Value.Description)">
                                                <i class="oi oi-x" style="background-color: transparent; color: red;" />
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="card-footer d-flex justify-content-end">
                        <button class="btn" @onclick="AddChoice">
                            <i class="oi oi-plus" style="background-color: transparent; color: blue;" />
                        </button>
                    </div>
                </div>
            } else if (type == "ShortAnswerProblem") {
                <div class="card mb-4">
                    <div class="card-header">
                        정답 입력
                    </div>
                    <div class="card-body d-flex flex-column align-items-stretch">
                        <input type="text" class="form-control" placeholder="정답을 입력하세요." @bind="shortAnswer">
                    </div>
                </div>
            } else if (type == "CodingProblem") {
                <div class="card mb-4">
                    <div class="card-header">
                        예시 코드 입력
                    </div>
                    <div class="card-body d-flex flex-column align-items-stretch">
                        <MonacoEditor @ref="ExampleCodeEditor" EditorID="exampleEditor" EnableThemeChange="false" InitCode="@exampleCode" />
                    </div>
                </div>
                <p></p>
                <div class="card mb-4">
                    <div class="card-header">
                        정답 코드 입력
                    </div>
                    <div class="card-body d-flex flex-column align-items-stretch">
                        <MonacoEditor @ref="AnswerCodeEditor" EditorID="AnswerEditor" EnableThemeChange="false" InitCode="@answerCode" />
                    </div>
                </div>
            }
        </div>
        <p></p>
    </ModalContent>
    <ModalFooter>
        <button class="btn btn-primary" @onclick="SaveAndCloseModal">저장</button>
        <button class="btn btn-secondary" @onclick="CloseModal">취소</button>
    </ModalFooter>
</Modal>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public ExamProblem Problem { get; set; }

    // MonacoEditor 컴포넌트 참조 변수
    private MonacoEditor? ExampleCodeEditor;
    private MonacoEditor? AnswerCodeEditor;

    private string? description = null;
    private string type = "MultipleChoiceProblem";
    private int score;

    private int maxDisplayLength = 70;

    private List<MultipleChoice> multipleChoices = new List<MultipleChoice>();
    private string multipleChoiceAnswer = string.Empty;

    private string shortAnswer = string.Empty;

    private string? exampleCode = null;
    private string? answerCode = null;

    protected override async Task OnInitializedAsync() {
        if (Problem == null) return;

        description = Problem.Description;
        type = Problem.GetType().Name;
        score = Problem.Score;

        switch (type) {
            case "MultipleChoiceProblem":
                MultipleChoiceProblem multipleChoiceProblem = (MultipleChoiceProblem)Problem;
                if (multipleChoiceProblem != null) {
                    multipleChoices = multipleChoiceProblem.Choices;
                    multipleChoiceAnswer = multipleChoiceProblem.Answer;
                }
                break;
            case "ShortAnswerProblem":
                ShortAnswerProblem shortAnswerProblem = (ShortAnswerProblem)Problem;
                if (shortAnswerProblem != null) {
                    shortAnswer = shortAnswerProblem.Answer;
                }
                break;
            case "CodingProblem":
                CodingProblem codingProblem = (CodingProblem)Problem;
                if (codingProblem != null) {
                    exampleCode = codingProblem.Example;
                    answerCode = codingProblem.Answer;
                }
                break;
        }
    }

    public void OnAnswerSelected(ChangeEventArgs? e) {
        if (e != null && e.Value != null) {
            multipleChoiceAnswer = e.Value.ToString();
        }
    }

    private async Task AddChoice() {
        var parameters = new ModalParameters();
        parameters.Add("choiceDesc", string.Empty);
        var modalOptions = new ModalOptions() { Size = Blazored.Modal.ModalSize.ExtraLarge, DisableBackgroundCancel = true };
        var modalReference = ModalService.Show<MultipleChoiceModal>("보기 추가", parameters, modalOptions);

        var result = await modalReference.Result;
        if (result.Confirmed && result.Data != null) {
            string? choiceDesc = result.Data.ToString();
            if (choiceDesc != null) {
                MultipleChoice choice = new MultipleChoice {
                    Description = choiceDesc
                };

                // 추가하려는 보기와 동일한 보기가 이미 존재할 경우 반려
                if (multipleChoices.Contains(choice)) {
                    await JSRuntime.InvokeVoidAsync("alert", "이미 존재하는 보기입니다.");
                } 
                // 보기 추가 가능
                else {
                    multipleChoices.Add(choice);
                }

            }
        }
    }

    private async Task ModifyChoice(int index, MultipleChoice selectedChoice) {
        var parameters = new ModalParameters();
        parameters.Add("choiceDesc", selectedChoice.Description);
        var modalOptions = new ModalOptions() { Size = Blazored.Modal.ModalSize.ExtraLarge, DisableBackgroundCancel = true };
        var modalReference = ModalService.Show<MultipleChoiceModal>("보기 수정", parameters, modalOptions);

        var result = await modalReference.Result;
        if (result.Confirmed && result.Data != null) {
            string? choiceDesc = result.Data.ToString();
            if (choiceDesc != null) {
                if (index != -1) {
                    multipleChoices[index] = new MultipleChoice {
                        ChoiceId = selectedChoice.ChoiceId,
                        Description = choiceDesc
                    };
                    StateHasChanged();
                }
            }
        }
    }

    private async Task DeleteChoice(int index, string selectedQuestion) {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "해당 문제가 제거됩니다.");
        if (confirmed) {
            if (selectedQuestion != null) {
                if (index != -1) {
                    multipleChoices.RemoveAt(index);
                }
            }
        } else {
            return;
        }
    }

    private void ShowFullContent(string content) {
        var parameters = new ModalParameters();
        parameters.Add("Content", content);
        var modalOptions = new ModalOptions() { Size = Blazored.Modal.ModalSize.ExtraLarge, DisableBackgroundCancel = true };
        var modalReference = ModalService.Show<ShowMoreContentModal>("내용 더보기", parameters, modalOptions);
    }

    private async Task SaveAndCloseModal() {
        if (description == null) {
            await JSRuntime.InvokeVoidAsync("alert", "내용을 입력하세요.");
            return;
        }

        if (score == null) {
            await JSRuntime.InvokeVoidAsync("alert", "점수를 입력하세요.");
            return;
        }

        if (type == "MultipleChoiceProblem" && multipleChoices.Count <= 0) {
            await JSRuntime.InvokeVoidAsync("alert", "보기를 입력하세요.");
            return;
        }

        if (type == "MultipleChoiceProblem" && multipleChoiceAnswer == string.Empty) {
            await JSRuntime.InvokeVoidAsync("alert", "보기 중 정답을 선택하세요.");
            return;
        }

        switch (type) {
            case "MultipleChoiceProblem":
                MultipleChoiceProblem multipleChoiceProblem = new MultipleChoiceProblem();

                multipleChoiceProblem.Choices = multipleChoices;

                multipleChoiceProblem.Description = description;
                multipleChoiceProblem.Score = score;
                multipleChoiceProblem.Answer = multipleChoiceAnswer;

                await ModalInstance.CloseAsync(ModalResult.Ok(multipleChoiceProblem));
                break;

            case "ShortAnswerProblem":
                ShortAnswerProblem shortAnswerProblem = new ShortAnswerProblem();
                shortAnswerProblem.Answer = shortAnswer;

                shortAnswerProblem.Description = description;
                shortAnswerProblem.Score = score;

                await ModalInstance.CloseAsync(ModalResult.Ok(shortAnswerProblem));
                break;

            case "CodingProblem":
                CodingProblem codingProblem = new CodingProblem();

                codingProblem.Example = await ExampleCodeEditor.editor.GetValue();
                codingProblem.Answer = await AnswerCodeEditor.editor.GetValue();

                codingProblem.Description = description;
                codingProblem.Score = score;

                await ModalInstance.CloseAsync(ModalResult.Ok(codingProblem));
                break;
        }
    }

    private async Task CloseModal() {
        await ModalInstance.CloseAsync();
    }
}


 