@page "/classroom/{roomid:int}/exam/editor"
@layout MainLayout
@using Blazored.Modal
@using Blazored.Modal.Services
@using Blazored.TextEditor
@using ClassHub.Client.Models
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject Blazored.Modal.Services.IModalService ModalService

<style>
    .ql-editor{
        min-height:200px;
    }
</style>

<div class="col-md-12">
    <BackButton Msg="저장하지 않고 나가기" />
    <div class="card mb-4">
        <div class="card-header">
            <input type="text" class="form-control mb-3" placeholder="Title">
            <ul class="nav nav-tabs card-header-tabs">
                <li class="nav-item">
                    <a class="nav-link active" data-toggle="tab" data-target="#editor-tab">Write</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="tab" data-target="#preview-tab">Preview</a>
                </li>
            </ul>
        </div>

        <div class="card-body d-flex flex-column align-items-stretch">
            <BlazoredTextEditor @ref=QuillHtml Placeholder="Write Exam Description...">
                <ToolbarContent>
                    <select class="ql-header">
                        <option selected=""></option>
                        <option value="1"></option>
                        <option value="2"></option>
                        <option value="3"></option>
                        <option value="4"></option>
                        <option value="5"></option>
                    </select>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-align" value=""></button>
                        <button class="ql-align" value="center"></button>
                        <button class="ql-align" value="right"></button>
                        <button class="ql-align" value="justify"></button>
                    </span>
                </ToolbarContent>
            </BlazoredTextEditor>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            Exam Options
        </div>
        <div class="card-body">
            <div class="form-check-inline">
                <input class="form-check-input" type="checkbox" id="option1" name="option1" @bind="isRandomProblem">
                <label class="form-check-label" for="option1">
                    문제 순서 섞기 허용
                </label>
            </div>
            <div class="form-check-inline">
                <input class="form-check-input" type="checkbox" id="option2" name="option2" @bind="isRandomChoice">
                <label class="form-check-label" for="option2">
                    보기 순서 섞기 허용
                </label>
            </div>
            <div class="form-check-inline">
                <input class="form-check-input" type="checkbox" id="option3" name="option3" @bind="isShowTimeLimit">
                <label class="form-check-label" for="option3">
                    제한 시간 표시 허용
                </label>
            </div>
            <div class="form-check-inline">
                <input class="form-check-input" type="checkbox" id="option4" name="option3" @bind="isBackToPreviousProblem">
                <label class="form-check-label" for="option4">
                    이전 문제로 돌아가기 허용
                </label>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            Problem List
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Description</th>
                        <th>Type</th>
                        <th>Score</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var problem in problems) {
                        <tr style="vertical-align: middle;">
                            <td>@problem.ProblemId</td>
                            <td>
                                @{
                                    string description = problem.Description;
                                    if (description.Length > maxDisplayLength) {
                                        description = $"{description.Substring(0, maxDisplayLength)}..."; // 일정 길이 이상일 경우 일부만 표시
                                    }
                                }
                                <span>@description</span>
                                @if (problem.Description.Length > maxDisplayLength) {
                                    // 일정 길이 이상일 경우 "더 보기" 버튼 추가
                                    <button class="btn btn-link" @onclick="() => ShowFullDescription(problem.Description)">더 보기</button>
                                }
                            </td>
                            <td>
                                @if (problem is MultipleChoiceProblem) {
                                    <span>객관식</span>
                                } else if (problem is ShortAnswerProblem) {
                                    <span>단답형</span>
                                } else if (problem is CodeProblem) {
                                    <span>코드형</span>
                                }
                            </td>
                            <td>@problem.Score</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => ModifyProblem(problem)">
                                    <i class="oi oi-pencil" />
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="card-footer d-flex justify-content-end">
            <button class="btn btn-primary" @onclick="AddProblem">
                <i class="oi oi-plus" />
            </button>
        </div>
    </div>

    <div class="d-flex justify-content-end">
        <button class="btn btn-success" @onclick="Submit">시험 등록</button>
    </div>
</div>

@code {
    [Parameter]
    public int RoomId { get; set; }

    // 문제 순서 랜덤 여부
    private bool isRandomProblem = true;

    // 보기 순서 랜덤 여부
    private bool isRandomChoice = true;

    // 제한 시간 표시 여부
    private bool isShowTimeLimit = true;

    // 이전 문제로 돌아갈 수 있는지 여부
    private bool isBackToPreviousProblem = true;

    List<ExamProblem> problems;

    private BlazoredTextEditor QuillHtml;

    private int maxDisplayLength = 70;

    protected override async Task OnInitializedAsync() {
        problems = new List<ExamProblem>();
        problems.Add(new MultipleChoiceProblem {
            ProblemId = 1,
            Description = "What is the capital of South Korea?",
            Score = 10,
            Questions = new string[] { "Seoul", "Busan", "Daegu", "Incheon" },
            Answer = 0
        });
        problems.Add(new ShortAnswerProblem {
            ProblemId = 2,
            Description = "What is the capital of South Korea?",
            Score = 10,
            Answer = "Seoul"
        });
        problems.Add(new CodeProblem {
            ProblemId = 3,
            Description = "What is the capital of South Korea?",
            Score = 10,
            Example = "Example",
            Answer = "Seoul"
        });
    }

    private void ShowFullDescription(string description) {
        var parameters = new ModalParameters();
        parameters.Add("Description", description);
        var modalOptions = new ModalOptions() { Size = Blazored.Modal.ModalSize.ExtraLarge };
        var modalReference = ModalService.Show<MoreProblemDescModal>("내용 더보기", parameters, modalOptions);
    }

    private async Task AddProblem() {
        var parameters = new ModalParameters();
        parameters.Add("Problem", null);
        var modalOptions = new ModalOptions() { Size = Blazored.Modal.ModalSize.ExtraLarge };
        var modalReference = ModalService.Show<ExamProblemModal>("문제 추가", parameters, modalOptions);

        var result = await modalReference.Result;
        if (result.Confirmed && result.Data != null) {
            ExamProblem problem = (ExamProblem)result.Data;
            if (problem != null) {
                problem.ProblemId = problems.Count + 1;
                problems.Add(problem);
            }
        }
    }

    private async Task ModifyProblem(ExamProblem selectedProblem) {
        var parameters = new ModalParameters();
        parameters.Add("Problem", selectedProblem);
        var modalOptions = new ModalOptions() { Size = Blazored.Modal.ModalSize.ExtraLarge };
        var modalReference = ModalService.Show<ExamProblemModal>("문제 수정", parameters, modalOptions);

        var result = await modalReference.Result;
        if (result.Confirmed && result.Data != null) {
            ExamProblem problem = (ExamProblem)result.Data;
            if (problem != null) {
                var index = problems.IndexOf(selectedProblem);
                if (index != -1) {
                    problems[index] = problem;
                    StateHasChanged(); // Notify the UI to update
                }
            }
        }
    }

    private void Submit() {
        Console.WriteLine("시험 등록 버튼 클릭");

        NavigationManager.NavigateTo(NavigationManager.Uri.Substring(0, NavigationManager.Uri.LastIndexOf("/")));
    }
}
