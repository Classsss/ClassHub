@page "/classroom/{roomid:int}/exam/editor"
@layout MainLayout
@using Blazored.Modal
@using Blazored.Modal.Services
@using Blazored.TextEditor
@using ClassHub.Client.Models
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject Blazored.Modal.Services.IModalService ModalService

<div class="col-md-12">
    <BackButton Msg="저장하지 않고 나가기" />
    <div class="card mb-4">
        <div class="card-header">
            시험 제목 입력
        </div>
        <div class="card-body">
            <input type="text" class="form-control" placeholder="제목을 입력하세요." @bind="exam.Title">
        </div>
    </div>

    <div class="form-group" style="margin-top: 2em;">
        <label for="startTime">시작 일:</label>
        <input type="datetime-local"
               max="2023-06-21T21:00"
               min="2023-05-26T12:30"
               @bind="startDate"
               class="form-control" />
    </div>
    <div class="form-group" style="margin-top: 1em; margin-bottom: 1em">
        <label for="endTime">종료 일:</label>
        <input type="datetime-local"
               max="2023-06-21T21:00"
               min="2023-05-26T12:30"
               @bind="endDate"
               class="form-control" />
    </div>

    <div class="card mb-4" style="vertical-align: middle;">
        <div class="card-header">
            시험 방식
        </div>
        <div class="card-body">
            <div class="form-check-inline">
                <input class="form-check-input" type="checkbox" id="option1" name="option1" @bind="isRandomProblem">
                <label class="form-check-label" for="option1">
                    문제 순서 섞기 허용
                </label>
            </div>
            <div class="form-check-inline">
                <input class="form-check-input" type="checkbox" id="option2" name="option2" @bind="isRandomChoice">
                <label class="form-check-label" for="option2">
                    보기 순서 섞기 허용
                </label>
            </div>
            <div class="form-check-inline">
                <input class="form-check-input" type="checkbox" id="option3" name="option3" @bind="isShowTimeLimit">
                <label class="form-check-label" for="option3">
                    제한 시간 표시 허용
                </label>
            </div>
            <div class="form-check-inline">
                <input class="form-check-input" type="checkbox" id="option4" name="option3" @bind="isBackToPreviousProblem">
                <label class="form-check-label" for="option4">
                    이전 문제로 돌아가기 허용
                </label>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            문제 목록
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>#</th>
                        <th width="70%">내용</th>
                        <th>문제 유형</th>
                        <th>점수</th>
                        <th>수정</th>
                        <th>제거</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var problem in problems.Select((value, index) => new { Value = value, Index = index })) {
                        <tr style="vertical-align: middle;">
                            <td>@problem.Value.ProblemId</td>
                            <td>
                                @{
                                    string description = problem.Value.Description;
                                    if (description.Length > maxDisplayLength) {
                                        description = $"{description.Substring(0, maxDisplayLength)}..."; // 일정 길이 이상일 경우 일부만 표시
                                    }
                                }
                                <span>@description</span>
                                @if (problem.Value.Description.Length > maxDisplayLength) {
                                    // 일정 길이 이상일 경우 "더 보기" 버튼 추가
                                    <button class="btn btn-link" @onclick="() => ShowFullContent(problem.Value.Description)">더 보기</button>
                                }
                            </td>
                            <td>
                                @if (problem.Value is MultipleChoiceProblem) {
                                    <span>객관식</span>
                                } else if (problem.Value is ShortAnswerProblem) {
                                    <span>단답형</span>
                                } else if (problem.Value is CodingProblem) {
                                    <span>코드형</span>
                                }
                            </td>
                            <td>@problem.Value.Score</td>
                            <td>
                                <button class="btn btn-sm" @onclick="() => ModifyProblem(problem.Index, problem.Value)">
                                    <i class="oi oi-pencil" style="background-color: transparent; color: black;" />
                                </button>
                            </td>
                            <td>
                                <button class="btn btn-sm" @onclick="() => DeleteProblem(problem.Index, problem.Value)">
                                    <i class="oi oi-x" style="background-color: transparent; color: red;" />
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="card-footer d-flex justify-content-end">
            <button class="btn" @onclick="AddProblem">
                <i class="oi oi-plus" style="background-color: transparent; color: blue;" />
            </button>
        </div>
    </div>

    <div class="d-flex justify-content-end">
        <button class="btn btn-success" @onclick="Submit">시험 등록</button>
    </div>
    <div>
        <p></p>
    </div>
</div>

@code {
    [Parameter]
    public int RoomId { get; set; }

    Exam exam;

    private DateTime startDate;
    private DateTime endDate;

    // 문제 순서 랜덤 여부
    private bool isRandomProblem = true;

    // 보기 순서 랜덤 여부
    private bool isRandomChoice = true;

    // 제한 시간 표시 여부
    private bool isShowTimeLimit = true;

    // 이전 문제로 돌아갈 수 있는지 여부
    private bool isBackToPreviousProblem = true;

    List<ExamProblem> problems;

    private int maxDisplayLength = 70;

    protected override async Task OnInitializedAsync() {
        exam = new Exam();

        startDate = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Asia/Seoul"));
        endDate = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Asia/Seoul"));

        problems = new List<ExamProblem>();
        problems.Add(new MultipleChoiceProblem {
            ProblemId = 1,
            Description = "What is the capital of South Korea?",
            Score = 10,
            Questions = new string[] { "Seoul", "Busan", "Daegu", "Incheon" },
            Answer = "seoul"
        });
        problems.Add(new ShortAnswerProblem {
            ProblemId = 2,
            Description = "What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?What is the capital of South Korea?",
            Score = 10,
            Answer = "Seoul"
        });
        problems.Add(new CodingProblem {
            ProblemId = 3,
            Description = "What is the capital of South Korea?",
            Score = 10,
            Example = "Example",
            Answer = "Seoul"
        });
    }

    private void ShowFullContent(string content) {
        var parameters = new ModalParameters();
        parameters.Add("Content", content);
        var modalOptions = new ModalOptions() { Size = Blazored.Modal.ModalSize.ExtraLarge, DisableBackgroundCancel = true };
        var modalReference = ModalService.Show<ShowMoreContentModal>("내용 더보기", parameters, modalOptions);
    }

    private async Task AddProblem() {
        var parameters = new ModalParameters();
        parameters.Add("Problem", null);
        var modalOptions = new ModalOptions() { Size = Blazored.Modal.ModalSize.ExtraLarge, DisableBackgroundCancel = true };
        var modalReference = ModalService.Show<ExamProblemModal>("문제 추가", parameters, modalOptions);

        var result = await modalReference.Result;
        if (result.Confirmed && result.Data != null) {
            ExamProblem problem = (ExamProblem)result.Data;
            if (problem != null) {
                problem.ProblemId = problems.Count + 1;
                problems.Add(problem);
            }
        }
    }

    private async Task ModifyProblem(int index, ExamProblem selectedProblem) {
        var parameters = new ModalParameters();
        parameters.Add("Problem", selectedProblem);
        var modalOptions = new ModalOptions() { Size = Blazored.Modal.ModalSize.ExtraLarge, DisableBackgroundCancel = true };
        var modalReference = ModalService.Show<ExamProblemModal>("문제 수정", parameters, modalOptions);

        var result = await modalReference.Result;
        if (result.Confirmed && result.Data != null) {
            ExamProblem problem = (ExamProblem)result.Data;
            if (problem != null) {
                if (index != -1) {
                    problem.ProblemId = selectedProblem.ProblemId;

                    problems[index] = problem;
                    StateHasChanged(); // Notify the UI to update
                }
            }
        }
    }

    private async Task DeleteProblem(int index, ExamProblem selectedProblem) {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "해당 문제가 제거됩니다.");
        if (confirmed) {
            if (selectedProblem != null) {
                if (index != -1) {
                    problems.RemoveAt(index);

                    for (int id = index + 1; id <= problems.Count; id++) {
                        problems[id - 1].ProblemId = id;
                    }
                }
            }
        } else {
            return;
        }
    }

    private async Task Submit() {
        Console.WriteLine("시험 등록 버튼 클릭");

        exam.Problems = problems;

        exam.Author = await UserInfo.GetUserNameAsync(JSRuntime);

        exam.StartDate = startDate;
        exam.EndDate = endDate;

        Console.WriteLine("title : " + exam.Title);
        Console.WriteLine("Problems.Count : " + exam.Problems.Count);
        Console.WriteLine("Author : " + exam.Author);
        Console.WriteLine("StartDate : " + exam.StartDate);
        Console.WriteLine("EndDate : " + exam.EndDate);

        NavigationManager.NavigateTo(NavigationManager.Uri.Substring(0, NavigationManager.Uri.LastIndexOf("/")));
    }
}
