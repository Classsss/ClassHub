@page "/classroom/{roomid:int}/exam/{examid:int}"
@using ClassHub.Client.Models
@using ClassHub.Client.Shared.ExamProblem
@using System.Timers;

@switch(problem) {
    case MultipleChoiceProblem multipleChoiceProblem:
        <MultipleChoiceDisplay Problem="@multipleChoiceProblem"  IsRandomChoice="@isRandomChoice" />
        break;
    case ShortAnswerProblem shortAnswerProblem:
        <ShortAnswerDisplay Problem="@shortAnswerProblem" />
        break;
    case CodeProblem codeProblem:
        <CodeProblemDisplay Problem="@codeProblem" />
        break;
}

<div class="container">
    <div class="row justify-content-center align-items-center">
        <div class="col text-center">
            <button class="btn btn-primary @(((currentProblemIndex <= 0) || isBackToPreviousProblem == false) ? "d-none" : "")" @onclick="PrevProblem">이전 문제</button>
        </div>
        <div class="col text-center">
            <p>@(currentProblemIndex+1) / @(problems.Count)</p>
            <p>남은 시간: @TimeLeft</p>
        </div>
        <div class="col text-center">
            <button class="btn btn-primary" @onclick="(currentProblemIndex == problems.Count - 1) ? (Action)FinishExam : (Action)NextProblem">
                @((currentProblemIndex == problems.Count - 1) ? "응시 완료" : "다음 문제")
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int RoomId { get; set; }
    [Parameter]
    public int ExamId { get; set; }

    [Parameter]
    public Exam examInfo { get; set; }
    private int currentProblemIndex;
    private List<ExamProblem> problems;
    private ExamProblem problem;

    private bool isRandomChoice;
    private bool isBackToPreviousProblem;

    private string TimeLeft { get; set; } = string.Empty;
    private Timer? timeLeftUpdateTimer;

    protected override async void OnInitialized() {
        examInfo = new Exam {
            Id = 1,
            StartDate = DateTime.Today.AddDays(-1),
            EndDate = DateTime.Today.AddDays(1),
            IsRandomProblem = true,
            IsRandomChoice = true,
            IsShowTimeLimit = true,
            IsBackToPreviousProblem = false
        };

        isRandomChoice = examInfo.IsRandomChoice;
        isBackToPreviousProblem = examInfo.IsBackToPreviousProblem;

        problems = new List<ExamProblem> {
            new MultipleChoiceProblem {
                ProblemId = 1,
                Description = "What is the capital city of France?",
                Questions = new string[] { "London", "Paris", "Berlin", "Madrid" },
            },
            new ShortAnswerProblem {
                ProblemId = 2,
                Description = "무엇이 의미 있는 삶인가? (10자 이내)"
            },
            new CodeProblem {
                ProblemId = 3,
                Description = "아래 코드를 수정하여 a와 b를 더한 값을 ans에 저장하여 출력하도록 하시오.",
                Example = @"int a, b;
int ans;
Console.WriteLine(ans);",
            }
        };

        // 문제 순서 무작위 셔플
        var rnd = new Random();
        problems = problems.OrderBy(item => rnd.Next()).ToList();

        currentProblemIndex = 0;
        problem = problems[currentProblemIndex];

        // 테스트를 위해 시험 시간 조작
        examInfo.StartDate = DateTime.Now.AddMinutes(-2);
        examInfo.EndDate = DateTime.Now.AddMinutes(2);

        // 초기 시간 저장
        // 남은 시간 계산
        var remainingTime = examInfo.EndDate - DateTime.Now;

        // 시간을 mm:ss 형식으로 변환
        TimeLeft = $"{remainingTime:hh\\:mm\\:ss}";
    }

    private void NextProblem() {
        if(currentProblemIndex < problems.Count - 1) {
            problem = problems[++currentProblemIndex];
        }
    }

    private void PrevProblem() {
        if(currentProblemIndex > 0) {
            problem = problems[--currentProblemIndex];
        }
    }

    private void FinishExam() {
        Console.WriteLine("응시 완료");
    }

    /// <summary>
    /// 타이머에 등록되어 화면에 표시하는 TimeLeft를 업데이트하는 함수
    /// </summary>
    private void UpdateTimeLeft(object? sender, ElapsedEventArgs e) {
        // 남은 시간 계산
        TimeSpan remainingTime = examInfo.EndDate - DateTime.Now;

        // 시간을 mm:ss 형식으로 변환
        TimeLeft = $"{remainingTime:hh\\:mm\\:ss}";

        InvokeAsync(StateHasChanged).Wait();

        if (DateTime.Now >= examInfo.EndDate) {
            // 타이머 중지
            if (sender != null) {
                ((Timer)sender).Stop();

                FinishExam();
            }
        }
    }
}
