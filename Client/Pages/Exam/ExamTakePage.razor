@page "/classroom/{roomid:int}/exam/{examid:int}"
@using ClassHub.Client.Models
@using ClassHub.Client.Shared.ExamProblem
@using System.Timers;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient Http
@implements IDisposable

@switch(problem) {
    case MultipleChoiceProblem multipleChoiceProblem:
        <MultipleChoiceDisplay Problem="@multipleChoiceProblem" IsRandomChoice="@paramIsRandomChoice" />
        break;
    case ShortAnswerProblem shortAnswerProblem:
        <ShortAnswerDisplay Problem="@shortAnswerProblem" />
        break;
    case CodingProblem codingProblem:
        <CodeProblemDisplay Problem="@codingProblem" />
        break;
}

<div class="container">
    <div class="row justify-content-center align-items-center">
        <div class="col text-center">
            <button class="btn btn-primary @(((currentProblemIndex <= 0) || paramIsBackToPreviousProblem == false) ? "d-none" : "")" @onclick="PrevProblem">이전 문제</button>
        </div>
        <div class="col text-center">
            <p>@(currentProblemIndex+1) / @(problems.Count)</p>
            <p>남은 시간: @TimeLeft</p>
        </div>
        <div class="col text-center">
            <button class="btn btn-primary" @onclick="(currentProblemIndex == problems.Count - 1) ? (Action)FinishExam : (Action)NextProblem">
                @((currentProblemIndex == problems.Count - 1) ? "응시 완료" : "다음 문제")
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int RoomId { get; set; }
    [Parameter]
    public int ExamId { get; set; }

    private Exam examInfo = new Exam();

    private int currentProblemIndex;
    private List<ExamProblem> problems = new List<ExamProblem>();
    private ExamProblem problem = new ExamProblem();

    private bool paramIsRandomChoice;
    private bool paramIsBackToPreviousProblem;

    private string TimeLeft { get; set; } = string.Empty;
    private Timer? timeLeftUpdateTimer;

    private string role = string.Empty;

    protected override async Task OnInitializedAsync() {
        // db에서 Exam 모델을 받아온다.
        role = await UserInfo.GetRoleAsync(JSRuntime);
        examInfo = await Http.GetFromJsonAsync<Models.Exam>($"api/exam/room_id/{RoomId}/exam_id/{ExamId}/student_id/{await UserInfo.GetUserIdAsync(JSRuntime)}");
        //assignmentSubmit = await Http.GetFromJsonAsync<AssignmentSubmit>($"api/assignmentsubmit/room_id/{RoomId}/assignment_id/{AssignmentId}/student_id/{await UserInfo.GetUserIdAsync(JSRuntime)}");

        paramIsRandomChoice = examInfo.IsRandomChoice;
        paramIsBackToPreviousProblem = examInfo.IsBackToPreviousProblem;
        problems = examInfo.Problems;

        // 문제 순서 무작위 셔플
        if (examInfo.IsRandomProblem) {
            var rnd = new Random();
            problems = problems.OrderBy(item => rnd.Next()).ToList();
        }

        currentProblemIndex = 0;
        problem = problems[currentProblemIndex];

        // 초기 시간 저장
        // 남은 시간 계산
        var remainingTime = examInfo.EndDate - DateTime.Now;

        // 시간을 mm:ss 형식으로 변환
        TimeLeft = $"{remainingTime:hh\\:mm\\:ss}";

        // 타이머 생성
        timeLeftUpdateTimer = new Timer(1000); // 1초마다 이벤트 발생

        // 이벤트 핸들러 등록
        timeLeftUpdateTimer.Elapsed += UpdateTimeLeft;

        // 타이머 시작
        timeLeftUpdateTimer.Start();
    }

    private void NextProblem() {
        if(currentProblemIndex < problems.Count - 1) {
            problem = problems[++currentProblemIndex];
        }
    }

    private void PrevProblem() {
        if(currentProblemIndex > 0) {
            problem = problems[--currentProblemIndex];
        }
    }

    private void FinishExam() {
        Console.WriteLine("응시 완료");
    }

    /// <summary>
    /// 타이머에 등록되어 화면에 표시하는 TimeLeft를 업데이트하는 함수
    /// </summary>
    private void UpdateTimeLeft(object? sender, ElapsedEventArgs e) {
        // 남은 시간 계산
        TimeSpan remainingTime = examInfo.EndDate - DateTime.Now;

        // 시간을 mm:ss 형식으로 변환
        TimeLeft = $"{remainingTime:hh\\:mm\\:ss}";

        InvokeAsync(StateHasChanged).Wait();

        if (DateTime.Now >= examInfo.EndDate) {
            // 타이머 중지
            if (sender != null) {
                ((Timer)sender).Stop();

                FinishExam();
            }
        }
    }

    public void Dispose() {
        // 페이지를 빠져나올 때 타이머 제거
        timeLeftUpdateTimer?.Dispose();
    }
}
