@page "/classroom/{RoomId:int}/statistics"
@layout MainLayout
@using ChartJs.Blazor.BarChart
@using ClassHub.Client.Shared.Chart;
@using ClassHub.Shared;
@using CsvHelper;
@using CsvHelper.Configuration;
@using System.Drawing;
@using System.Globalization;
@using System.Text;
@using System.Text.Json;
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if(studentGradeList == null) {
    <LoadingBar />
} else {
    <div class="card">
        <h5 class="card-header">성적 비율</h5>
        <div class="card-body">
            <table class="form-table">
                <tr>
                    <th>출석</th>
                    <th>과제</th>
                    <th>실습</th>
                    <th>시험</th>
                </tr>
                <tr>
                    <AuthorizeView Roles="professor">
                        <td><InputText @bind-Value="attendanceRatioString" class="form-control" /></td>
                        <td><InputText @bind-Value="assignmentRatioString" class="form-control" /></td>
                        <td><InputText @bind-Value="practiceRatioString" class="form-control" /></td>
                        <td><InputText @bind-Value="examRatioString" class="form-control" /></td>
                        <td><button @onclick="UpdateGradeRatio" class="btn btn-primary">수정</button></td>
                    </AuthorizeView>
                    <AuthorizeView Roles="student">
                        <td>
                            <div class="form-control">
                                @(attendanceRatioString)%
                            </div>
                        </td>
                        <td>
                            <div class="form-control">
                                @(assignmentRatioString)%
                            </div>
                        </td>
                        <td>
                            <div class="form-control">
                                @(practiceRatioString)%
                            </div>
                        </td>
                        <td>
                            <div class="form-control">
                                @(examRatioString)%
                            </div>
                        </td>
                    </AuthorizeView>
                </tr>
            </table>
        </div>
    </div>
    <hr />

    <Chart Config="_config" @ref="_chart"></Chart>
    <hr />

    <div class="card">
        <h5 class="card-header">성적</h5>
        <div class="card-body">
            <AuthorizeView Roles="professor">
                <button class="btn btn-success float-end mb-2" @onclick="PrintGrade">
                    <span class="oi oi-print"> 성적 출력</span>
                </button>
            </AuthorizeView>

            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>학생(학번)</th>
                        <th @onclick="SortByAttendance" style="cursor: pointer;">
                            <span class=@((sortStateAttendance == SortState.Ascending) ? "oi oi-sort-ascending" : (sortStateAttendance == SortState.Descending) ? "oi oi-sort-descending" : "")>출석</span>
                        </th>
                        <th @onclick="SortByAssignment" style="cursor: pointer;">
                            <span class=@((sortStateAssignment == SortState.Ascending) ? "oi oi-sort-ascending" : (sortStateAssignment == SortState.Descending) ? "oi oi-sort-descending" : "")>과제</span>
                        </th>
                        <th @onclick="SortByPractice" style="cursor: pointer;">
                            <span class=@((sortStatePractice == SortState.Ascending) ? "oi oi-sort-ascending" : (sortStatePractice == SortState.Descending) ? "oi oi-sort-descending" : "")>실습</span>
                        </th>
                        <th @onclick="SortByExam" style="cursor: pointer;">
                            <span class=@((sortStateExam == SortState.Ascending) ? "oi oi-sort-ascending" : (sortStateExam == SortState.Descending) ? "oi oi-sort-descending" : "")>시험</span>
                        </th>
                        <th @onclick="SortByFinal" style="cursor: pointer;">
                            <span class=@((sortStateFinal == SortState.Ascending) ? "oi oi-sort-ascending" : (sortStateFinal == SortState.Descending) ? "oi oi-sort-descending" : "")>최종</span>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <AuthorizeView Roles="professor">
                        @foreach(var student in studentGradeList) {
                            <tr>
                                <td>@(student.name)(@student.student_id)</td>
                                <td>@(Math.Floor(student.attendance_score) == student.attendance_score ? student.attendance_score.ToString("F0") : (Math.Floor(student.attendance_score * 10) / 10).ToString())</td>
                                <td>@(Math.Floor(student.assignment_score) == student.assignment_score ? student.assignment_score.ToString("F0") : (Math.Floor(student.assignment_score * 10) / 10).ToString())</td>
                                <td>@(Math.Floor(student.practice_score) == student.practice_score ? student.practice_score.ToString("F0") : (Math.Floor(student.practice_score * 10) / 10).ToString())</td>
                                <td>@(Math.Floor(student.exam_score) == student.exam_score ? student.exam_score.ToString("F0") : (Math.Floor(student.exam_score * 10) / 10).ToString())</td>
                                <td>@(Math.Floor(student.final_score) == student.final_score ? student.final_score.ToString("F0") : (Math.Floor(student.final_score * 10) / 10).ToString())</td>
                            </tr>
                        }
                    </AuthorizeView>
                    <AuthorizeView Roles="student">
                        @{
                            var student = studentGradeList.Where(s => s.student_id == userId).FirstOrDefault();
                            <tr>
                                <td>@(student.name)(@student.student_id)</td>
                                <td>@(Math.Floor(student.attendance_score) == student.attendance_score ? student.attendance_score.ToString("F0") : (Math.Floor(student.attendance_score * 10) / 10).ToString())</td>
                                <td>@(Math.Floor(student.assignment_score) == student.assignment_score ? student.assignment_score.ToString("F0") : (Math.Floor(student.assignment_score * 10) / 10).ToString())</td>
                                <td>@(Math.Floor(student.practice_score) == student.practice_score ? student.practice_score.ToString("F0") : (Math.Floor(student.practice_score * 10) / 10).ToString())</td>
                                <td>@(Math.Floor(student.exam_score) == student.exam_score ? student.exam_score.ToString("F0") : (Math.Floor(student.exam_score * 10) / 10).ToString())</td>
                                <td>@(Math.Floor(student.final_score) == student.final_score ? student.final_score.ToString("F0") : (Math.Floor(student.final_score * 10) / 10).ToString())</td>
                            </tr>
                        }
                    </AuthorizeView>
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    [Parameter]
    public int RoomId { get; set; }

    private string attendanceRatioString = "100";
    private string assignmentRatioString = "100";
    private string practiceRatioString = "100";
    private string examRatioString = "100";

    private GradeRatio? gradeRatio;
    private int userId;

    private List<StudentGrade>? studentGradeList;

    // 정렬 상태를 나타내는 열거형
    enum SortState {
        None,
        Ascending,
        Descending
    }

    // 각 점수 항목별로 정렬 상태를 나타내는 변수들
    SortState sortStateAttendance = SortState.None;
    SortState sortStateAssignment = SortState.None;
    SortState sortStatePractice = SortState.None;
    SortState sortStateExam = SortState.None;
    SortState sortStateFinal = SortState.Descending;

    private BarConfig _config;
    private Chart _chart;

    protected override async Task OnInitializedAsync() {
        userId = await UserInfo.GetUserIdAsync(JSRuntime);
        HttpResponseMessage response = await Http.GetAsync($"api/classroom/graderatio?room_id={RoomId}");
        string json = await response.Content.ReadAsStringAsync();
        GradeRatio? gradeRatio = string.IsNullOrEmpty(json) ? null : JsonSerializer.Deserialize<GradeRatio>(json);
        attendanceRatioString = (gradeRatio != null) ? (gradeRatio.attendance_ratio * 100).ToString("0.0") : "25";
        assignmentRatioString = (gradeRatio != null) ? (gradeRatio.assignment_ratio * 100).ToString("0.0") : "25";
        practiceRatioString = (gradeRatio != null) ? (gradeRatio.practice_ratio * 100).ToString("0.0") : "25";
        examRatioString = (gradeRatio != null) ? (gradeRatio.exam_ratio * 100).ToString("0.0") : "25";

        studentGradeList = (await Http.GetFromJsonAsync<List<StudentGrade>>($"api/classroom/students/grade?room_id={RoomId}")).OrderByDescending(s => s.final_score).ToList();
        ConfigureChartConfig();
    }

    private void ConfigureChartConfig() {
        _config = new BarConfig(horizontal: true) {
                Options = new BarOptions {
                    Responsive = true,
                    Legend = new Legend {
                        Position = ChartJs.Blazor.Common.Enums.Position.Right
                    },
                    Title = new OptionsTitle {
                        Display = true,
                        Text = "최종 성적 분포",
                        FontSize = 20,
                    }
                }
            };

        int[] studentCounts = new int[11];
        for(int i = 0; i <= 10; i++) {
            foreach(float score in studentGradeList.Select(x => x.final_score)) {
                if((int)Math.Floor(score) / 10 == i) studentCounts[10 - i]++;
            }
        }

        IDataset<int> dataset = new BarDataset<int>(studentCounts, horizontal: true) {
            Label = "학생 수",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(128, ChartUtils.ChartColors.Blue)),
                BorderColor = ColorUtil.FromDrawingColor(ChartUtils.ChartColors.Blue),
            BorderWidth = 1
        };

        for(int i = 100; i >= 0; i -= 10) {
            _config.Data.Labels.Add(i.ToString() + "점");
        }

        _config.Data.Datasets.Add(dataset);
    }

    private async Task UpdateGradeRatio() {
        float attendanceRatio = float.Parse(attendanceRatioString) / 100;
        float assignmentRatio = float.Parse(assignmentRatioString) / 100;
        float practiceRatio = float.Parse(practiceRatioString) / 100;
        float examRatio = float.Parse(examRatioString) / 100;
        if(attendanceRatio + assignmentRatio + practiceRatio + examRatio != 1) {
            await JSRuntime.InvokeVoidAsync("alert", "비율의 합이 100이 되도록 입력해주세요.");
            return;
        }

        HttpResponseMessage response = await Http.GetAsync($"api/classroom/graderatio?room_id={RoomId}");
        string json = await response.Content.ReadAsStringAsync();
        var temp = string.IsNullOrEmpty(json) ? null : JsonSerializer.Deserialize<GradeRatio>(json);
        if (temp == null) gradeRatio = null;
        else {
            gradeRatio = new GradeRatio(Http) {
                room_id = RoomId,
                attendance_ratio = attendanceRatio,
                assignment_ratio = assignmentRatio,
                practice_ratio = practiceRatio,
                exam_ratio = examRatio,
            };
        };            

        if(gradeRatio == null) {
            gradeRatio = new GradeRatio(Http) {
                room_id = RoomId,
                attendance_ratio = attendanceRatio,
                assignment_ratio = assignmentRatio,
                practice_ratio = practiceRatio,
                exam_ratio = examRatio
            };
            await gradeRatio.SetGradeRatio();
        } else {
            gradeRatio.room_id = RoomId;
            gradeRatio.attendance_ratio = attendanceRatio;
            gradeRatio.assignment_ratio = assignmentRatio;
            gradeRatio.practice_ratio = practiceRatio;
            gradeRatio.exam_ratio = examRatio;
            await gradeRatio.UpdateGradeRatio();
        }

        await JSRuntime.InvokeVoidAsync("location.reload");
    }

    private async Task PrintGrade() {
        using(var ms = new MemoryStream())
        using(var sw = new StreamWriter(ms, Encoding.GetEncoding("utf-8")))
        using(var csv = new CsvWriter(sw, CultureInfo.InvariantCulture)) {
            csv.Context.RegisterClassMap<StudentGradeMap>();
            csv.WriteRecords(studentGradeList);
            await sw.FlushAsync();

            var bytes = ms.ToArray();
            var base64 = Convert.ToBase64String(bytes);
            var url = $"data:text/csv;base64,{base64}";
            await JSRuntime.InvokeVoidAsync("saveAsFile", "studentgrades.csv", url);
        }
    }

    // 열 헤더 클릭 시 호출되는 메소드들
    void SortByAttendance() {
        switch(sortStateAttendance) {
            case SortState.None:
            case SortState.Ascending:
                studentGradeList = studentGradeList.OrderByDescending(s => s.attendance_score).ToList();
                sortStateAttendance = SortState.Descending;
                break;
            case SortState.Descending:
                studentGradeList = studentGradeList.OrderBy(s => s.attendance_score).ToList();
                sortStateAttendance = SortState.Ascending;
                break;
        }
        sortStateAssignment = SortState.None;
        sortStatePractice = SortState.None;
        sortStateExam = SortState.None;
        sortStateFinal = SortState.None;
    }

    void SortByAssignment() {
        switch(sortStateAssignment) {
            case SortState.None:
            case SortState.Ascending:
                studentGradeList = studentGradeList.OrderByDescending(s => s.assignment_score).ToList();
                sortStateAssignment = SortState.Descending;
                break;
            case SortState.Descending:
                studentGradeList = studentGradeList.OrderBy(s => s.assignment_score).ToList();
                sortStateAssignment = SortState.Ascending;
                break;
        }
        sortStateAttendance = SortState.None;
        sortStatePractice = SortState.None;
        sortStateExam = SortState.None;
        sortStateFinal = SortState.None;
    }

    void SortByPractice() {
        switch(sortStatePractice) {
            case SortState.None:
            case SortState.Ascending:
                studentGradeList = studentGradeList.OrderByDescending(s => s.practice_score).ToList();
                sortStatePractice = SortState.Descending;
                break;
            case SortState.Descending:
                studentGradeList = studentGradeList.OrderBy(s => s.practice_score).ToList();
                sortStatePractice = SortState.Ascending;
                break;
        }
        sortStateAttendance = SortState.None;
        sortStateAssignment = SortState.None;
        sortStateExam = SortState.None;
        sortStateFinal = SortState.None;
    }

    void SortByExam() {
        switch(sortStateExam) {
            case SortState.None:
            case SortState.Ascending:
                studentGradeList = studentGradeList.OrderByDescending(s => s.exam_score).ToList();
                sortStateExam = SortState.Descending;
                break;
            case SortState.Descending:
                studentGradeList = studentGradeList.OrderBy(s => s.exam_score).ToList();
                sortStateExam = SortState.Ascending;
                break;
        }
        sortStateAttendance = SortState.None;
        sortStateAssignment = SortState.None;
        sortStatePractice = SortState.None;
        sortStateFinal = SortState.None;
    }

    void SortByFinal() {
        switch(sortStateFinal) {
            case SortState.None:
            case SortState.Ascending:
                studentGradeList = studentGradeList.OrderByDescending(s => s.final_score).ToList();
                sortStateFinal = SortState.Descending;
                break;
            case SortState.Descending:
                studentGradeList = studentGradeList.OrderBy(s => s.final_score).ToList();
                sortStateFinal = SortState.Ascending;
                break;
        }
        sortStateAttendance = SortState.None;
        sortStateAssignment = SortState.None;
        sortStatePractice = SortState.None;
        sortStateExam = SortState.None;
    }
}