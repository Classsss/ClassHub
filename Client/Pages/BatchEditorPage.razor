@page "/batcheditor"
@layout MainLayout
@using Blazored.TextEditor;

<style>
    .ql-editor {
        min-height: 200px;
    }
</style>

<AuthorizeView Roles="professor">
    <div class="col-md-12">
        <BackButton Msg="저장하지 않고 나가기" />
        <div class="card mb-4">
            <div class="card-header">
                <input type="text" @bind="title" class="form-control mb-3" placeholder="제목을 입력해주세요.">
                <ul class="nav nav-tabs card-header-tabs">
                    <li class="nav-item">
                        <a class="nav-link @(isWriteTabSelected ? "active" : "")" @onclick="SelectWriteTab" data-toggle="tab" data-target="#editor-tab" style="cursor: pointer;">Write</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link @(isWriteTabSelected ? "" : "active")" @onclick="SelectPreviewTab" data-toggle="tab" data-target="#preview-tab" style="cursor: pointer;">Preview</a>
                    </li>
                </ul>
            </div>
            <div class="card-body d-flex flex-column align-items-stretch">
                <BlazoredTextEditor DebugLevel="warn" @ref="@QuillHtml" Placeholder="내용을 입력해주세요.">
                    <ToolbarContent>
                        <select class="ql-header">
                            <option selected=""></option>
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>
                            <option value="4"></option>
                            <option value="5"></option>
                        </select>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-align" value=""></button>
                            <button class="ql-align" value="center"></button>
                            <button class="ql-align" value="right"></button>
                            <button class="ql-align" value="justify"></button>
                        </span>
                    </ToolbarContent>
                    <EditorContent />
                </BlazoredTextEditor>
            </div>
        </div>
    </div>

    @if(kind == Kind.LectureMaterial) {
        <WeekPicker weekValue="@selectedWeek" ValueChanged="OnWeekChanged" allowMultipleSelection=false />
        <br />
        <DragDropUpload @bind-droppedFiles="fileList" />
        <br />
    }

    <div class="d-flex justify-content-end mb-2">
        <button type="submit" class="btn btn-primary" @onclick="RegisterContent">등록</button>
    </div>
</AuthorizeView>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "kind")]
    public int KindParam { get; set; }

    public enum Kind {
        Notice, Lecture, Assignment, CodeAssignment, Exam, LectureMaterial
    }

    private Kind kind {
        get => (Kind)KindParam;
    }
    private string title;
    private string contents;
    BlazoredTextEditor? QuillHtml;
    private bool isWriteTabSelected = true;

    // LectureMaterial Content에 필요한 변수
    public List<int> selectedWeek = new List<int>() { 1, };
    private List<IBrowserFile> fileList = new List<IBrowserFile>();

    protected override void OnInitialized() {
        Console.WriteLine($"kind: {KindParam}");
    }

    private void RegisterContent() {
        
    }

    private async Task OnWeekChanged(List<int> week) {
        selectedWeek = week;
        Console.WriteLine(selectedWeek[0]);
        await Task.CompletedTask;
    }

    private void SelectWriteTab() {
        isWriteTabSelected = true;
        StateHasChanged();
    }

    private void SelectPreviewTab() {
        isWriteTabSelected = false;
        StateHasChanged();
    }
}
