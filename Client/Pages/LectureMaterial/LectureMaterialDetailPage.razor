@page "/classroom/{roomid:int}/lecturematerial/{materialid:int}"
@layout MainLayout
@inject HttpClient Http
@using ClassHub.Client.Models
@using ClassHub.Client.Shared.Board
@using ClassHub.Client.Shared.LectureMaterial
@using ClassHub.Shared

<BackButton />
@if(materialContent != null) {
	<LectureMaterialDetail Content="materialContent"/>
}

@code {
	// TODO: 공지사항과 다형성으로 구현 필요

	[Parameter]
	public int RoomId { get; set; }
	[Parameter]
	public int MaterialId { get; set; }

	private LectureMaterialContent materialContent;
	private List<LectureMaterialContent> materialContents;

	private int index;
	private NoticeContent? prevnotice;
	private NoticeContent? nextnotice;

	protected override async Task OnParametersSetAsync() {
		
		await LoadLectureMaterials();
		index = materialContents.FindIndex(a => a.content_id == MaterialId);

		if(index >= materialContents.Count) {
			// Do Something
			return;
		}

		materialContent = materialContents[index];
	}

	private async Task LoadLectureMaterials() {
		await base.OnInitializedAsync();
		materialContents = new List<LectureMaterialContent>();
		var materials = await Http.GetFromJsonAsync<List<LectureMaterial>>($"api/classroom/lecturematerial/all/{RoomId}");
		if(materials != null) {
			foreach(var material in materials) {
				this.materialContents.Add(new LectureMaterialContent() {
						room_id = material.room_id,
						week = material.week,
						content_id = material.material_id,
						title = material.title,
						author = material.author,
						contents = material.contents,
						publish_date = material.publish_date,
						up_date = material.up_date,
						view_count = material.view_count
					});
			}
		}
		StateHasChanged();
	}
}
