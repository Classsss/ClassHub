@page "/"
@layout MainLayout
@inject AuthenticationService AuthService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using ClassHub.Client.Models;
@using ClassHub.Shared;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.JSInterop;
@using System.Text;
@using System.Text.Json

@if (Sections == null)
{
    <div class="d-flex justify-content-center mt-5">
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status" />
    </div>  
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="alert alert-info" role="alert">
                    <strong>Notice:</strong> 시간표 내의 강의 영역을 클릭하면 강의실로 이동합니다.
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-9 col-12">
                <Timetable Sections="Sections" />
            </div>
            <div class="col-lg-3 col-12">
                <div class="row">
                    <h3 class="text-center col-12">ToDo List</h3>
                    <div class="col-12 border mb-3" style="overflow: auto; max-height: 460px;">
                        <ul class="list-group">
                            @for(int i = 1; i <= 20; i++) {
                                <li class="list-group-item">Task @i</li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="row">
                    <h3 class="text-center col-12">New Notifications</h3>
                    <div class="col-12 border" style="overflow: auto; max-height: 260px;">
                        <ul class="list-group">
                            @for(int i = 1; i <= 12; i++) {
                                <li class="list-group-item">Notification @i</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<Section>? Sections;

    protected async override void OnInitialized() {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var code))
        {
            AuthService.IsLoggedIn = true;
            exchangeToken(code);
        }

        // 로컬 스토리지에서 AccessToken이 있는지 확인
        var accessToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");
        if (!string.IsNullOrEmpty(accessToken)) AuthService.IsLoggedIn = true;

        if (AuthService.IsLoggedIn == false) NavigationManager.NavigateTo("/login");

        await getCourses(); //시간표 받아오기
    }

    protected async Task exchangeToken(String code)
    {
        var client = new HttpClient();
        client.BaseAddress = new Uri(NavigationManager.BaseUri);
        var request = new HttpRequestMessage(HttpMethod.Post, "TokenExchange/submit-code");

        request.Content = new StringContent(JsonSerializer.Serialize(new AccessTokenRequest { AuthorizationCode = code }), Encoding.UTF8, "application/json");
        try
        {
            var response = await client.SendAsync(request);
            var content = await response.Content.ReadAsStringAsync();
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", JsonSerializer.Deserialize<AccessTokenResponse>(content).AccessToken);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "refreshToken", JsonSerializer.Deserialize<AccessTokenResponse>(content).RefreshToken);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error during request: " + ex.Message);
        }
    }

    protected async Task getCourses()
    {
        //앱 서버로 수강과목 출력을 요청
        var client = new HttpClient();
        client.BaseAddress = new Uri(NavigationManager.BaseUri);
        var request = new HttpRequestMessage(HttpMethod.Post, "/Section");
        var response = await client.SendAsync(request);
        var content = await response.Content.ReadAsStringAsync();

        Console.WriteLine(content);
        Sections = JsonSerializer.Deserialize<List<Section>>(content);

        // 색상 부여
        if(Sections != null) {
            int colorIndex = 0;
            for(int i = 0; i < Sections.Count; i++) {
                var section1 = Sections[i];
                if(section1.Color == -1) {
                    section1.Color = colorIndex++;
                    for(int j = i + 1; j < Sections.Count; j++) {
                        var section2 = Sections[j];
                        if(section1.SectionId == section2.SectionId) section2.Color = section1.Color;
                    }
                } else continue;
            }
        }

        // 화면을 다시 그립니다.
        StateHasChanged(); 
	}
}