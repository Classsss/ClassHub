@page "/"
@layout MainLayout
@inject AuthenticationService AuthService
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject NavMenuTitleService NavMenuTitleService
@inject SSOAuthenticationStateProvider authProvider
@using ClassHub.Client.Models;
@using ClassHub.Shared;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.JSInterop;
@using System.Text;
@using System.Text.Json

@if (classRoomList == null)
{
    <div class="d-flex justify-content-center mt-5">
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status" />
    </div>  
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="alert alert-info" role="alert">
                    <strong>Notice:</strong> 시간표 내의 강의 영역을 클릭하면 강의실로 이동합니다.
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-9 col-12">
                <Timetable ClassRoomList="classRoomList" />
            </div>
            <div class="col-lg-3 col-12">
                <div class="row">
                    <h3 class="text-center col-12">ToDo List</h3>
                    <div class="col-12 border mb-3" style="overflow: auto; max-height: 460px;">
                        <ul class="list-group">
                            @for(int i = 1; i <= 20; i++) {
                                <li class="list-group-item">Task @i</li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="row">
                    <h3 class="text-center col-12">New Notifications</h3>
                    <div class="col-12 border" style="overflow: auto; max-height: 260px;">
                        <ul class="list-group">
                            @for(int i = 1; i <= 12; i++) {
                                <li class="list-group-item">Notification @i</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ClassRoomDetail>? classRoomList;
    private List<DisplayStudentNotification>? notificationList;

    protected async override void OnInitialized() {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        // 로컬 스토리지에서 AccessToken이 있는지 확인
        var accessToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");

        NavMenuTitleService.Title = "ClassHub"; 
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await GetTakesClassRoom(); //시간표 받아오기
            await getNotifications(); //알림 받아오기
        }
    }

    protected async Task GetTakesClassRoom() {
        var accessToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");

        if (accessToken != null) {
            var id = await UserInfo.GetUserIdAsync(JSRuntime);

            //앱 서버로 수강과목 출력을 요청
            try {
                classRoomList = await Http.GetFromJsonAsync<List<ClassRoomDetail>>($"api/classroom/takes?student_id={id}&accessToken={accessToken}");
                // 색상 부여
                if (classRoomList != null) {
                    Console.WriteLine("강좌 출력");
                    foreach(var crl in classRoomList) {
                        foreach(var slot in crl.timeSlots) {
                            Console.WriteLine(slot.day_of_week);
                        }
                    }

                    int colorIndex = 0;
                    for (int i = 0; i < classRoomList.Count; i++) {
                        var classRoom = classRoomList[i];
                        if (classRoom.color == -1) {
                            classRoom.color = colorIndex++;
                        }
                    }
                }
            } catch(Exception e) {
                Console.WriteLine(e);
                classRoomList = new List<ClassRoomDetail>();
            }
        }
        // 화면을 다시 그립니다.
        StateHasChanged(); 
    }

    protected async Task getNotifications() {
        // 로컬 스토리지에서 AccessToken 받아오기
        var accessToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");

        if (accessToken != null)
        {
            var id = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userID");
            Console.WriteLine($"{id} 학번으로 온 모든 알림을 불러옵니다.");

            try {
                notificationList = await Http.GetFromJsonAsync<List<DisplayStudentNotification>>($"api/classroom/notification/all?student_id={id}&accessToken={accessToken}");
                if (notificationList != null) {
                    foreach(DisplayStudentNotification notification in notificationList) {
                        Console.WriteLine(notification.message);
                    }
                }
            } catch (Exception e) {
                Console.WriteLine(e);
            }
        }

        // 화면을 다시 그립니다.
        StateHasChanged();
    }
}