@page "/{year:int}/{semester:int}/{number:int}/classroom/practice/{id:int}"
@layout MainLayout
@using ClassHub.Shared
@using System.Text.Json
@using System.Text
@inject HttpClient Http


<h3>Practice</h3>
<MonacoEditor @ref="MonacoEditorReference" />

<!--채점 서버로 요청을 보내는 버튼-->
<button class="btn btn-primary" @onclick="SubmitCode">코드 제출</button>

<div id="output-number">
    <h3>결과: @Output</h3>
    <h3>@Message</h3>
</div>

@code {
    [Parameter]
    public int Year { get; set; }
    [Parameter]
    public int Semester { get; set; }
    [Parameter]
    public int Number { get; set; }
    [Parameter]
    public int Id { get; set; }

    // 채점 결과를 표시할 변수
    private string Output = "";

    // 채점 결과와 동반되는 메시지를 표시할 변수
    private string Message = "";

    // MonacoEditor 컴포넌트 참조 변수
    private MonacoEditor? MonacoEditorReference;

    // 채점 서버로 요청을 보냄
    private async Task SubmitCode() {
        // Message 초기화
        Message = "";

        // 채점 요청을 전송하기 위한 객체 생성
        JudgeRequest request = new JudgeRequest();
        request.Code = await MonacoEditorReference.editor.GetValue();
        request.Id = "1";
        var model = await MonacoEditorReference.editor.GetModel();
        var language = await model.GetLanguageId();
        request.Language = language;

        // 직렬화
        var content = new StringContent(JsonSerializer.Serialize(request), Encoding.UTF8, "application/json");
        // 전송
        HttpResponseMessage response = await Http.PostAsync("Judge", content);

        // 통신 성공 여부에 따라 구분

        if (response.IsSuccessStatusCode) {
            JudgeResult? judgeResult = await response.Content.ReadFromJsonAsync<JudgeResult>();

            // Valid response
            if (judgeResult != null) {
                switch (judgeResult.Result) {
                    case JudgeResult.JResult.Accepted:
                        Output = "맞았습니다.\n실행 시간(ms) : " + string.Format("{0:F3}", judgeResult.ExecutionTime) + "\n메모리 사용량(KB) : " + judgeResult.MemoryUsage;
                        Console.WriteLine("맞았습니다.");
                        Console.WriteLine("실행 시간(ms) : " + judgeResult.ExecutionTime);
                        Console.WriteLine("메모리 사용량(KB) : " + judgeResult.MemoryUsage);
                        break;
                    case JudgeResult.JResult.WrongAnswer:
                        Output = "틀렸습니다.";
                        Console.WriteLine("틀렸습니다.");
                        break;
                    case JudgeResult.JResult.CompileError:
                        Output = "컴파일 에러";
                        Console.WriteLine("컴파일 에러");
                        break;
                    case JudgeResult.JResult.RuntimeError:
                        Output = "런타임 에러";
                        Console.WriteLine("런타임 에러");
                        break;
                    case JudgeResult.JResult.TimeLimitExceeded:
                        Output = "시간 초과";
                        Console.WriteLine("시간 초과");
                        break;
                    case JudgeResult.JResult.MemoryLimitExceeded:
                        Output = "메모리 초과";
                        Console.WriteLine("메모리 초과");
                        break;
                    case JudgeResult.JResult.PresentationError:
                        Output = "출력 형식 오류";
                        Console.WriteLine("출력 형식 오류");
                        break;
                    case JudgeResult.JResult.OutputLimitExceeded:
                        Output = "출력 한도 초과";
                        Console.WriteLine("출력 한도 초과");
                        break;
                    case JudgeResult.JResult.JudgementFailed:
                        Output = "채점 실패";
                        Console.WriteLine("채점 실패");
                        break;
                    case JudgeResult.JResult.Pending:
                        Output = "채점 미완료";
                        Console.WriteLine("채점 미완료");
                        break;
                }

                // 메시지가 유효하면 화면에 표시
                if (judgeResult.Message != null) {
                    Message = judgeResult.Message;
                } 
            }
            // Invalid Response

            else {
                // TODO : JudgeServer로 보낸 Post 요청이 실패했을 때 처리
                Console.WriteLine("Invalid response");
            }
        }
        // Post 요청 실패
        else {
            // TODO : JudgeServer로 보낸 Post 요청이 실패했을 때 처리
            Console.WriteLine("Failed to post data " + response.StatusCode);
        }
    }
}