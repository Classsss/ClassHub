@page "/classroom/{id:int}"
@layout MainLayout
@using ClassHub.Shared
@using ClassHub.Client.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<!--Role 테스트용 AuthView-->
<AuthorizeView Roles="student">
    <Authorized>
        <h1>어서와 학생</h1>
    </Authorized>
</AuthorizeView>
<AuthorizeView Roles="professor">
    <Authorized>
        <h1>교수님 어서오세요</h1>
    </Authorized>
</AuthorizeView>
@if(classRoom == null) {
    <p><em>강의실 정보를 로딩 중입니다...</em></p>
} else {
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-9 col-12">
                <AttendanceStatusVertical MaxCount="2" />
            </div>
            <div class="col-lg-3 col-12">
                <div class="row">
                    <h3 class="text-center col-12">공지사항</h3>
                    <div class="col-12 border mb-3" style="overflow: auto; max-height: 460px;">
                        <ul class="list-group">
                            @foreach(var content in contents)
                            {
                                <li class="list-group-item" @onclick="@(() => ShowContents(content))" style="cursor:pointer;">@content.title</li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="row">
                    <h3 class="text-center col-12">질의응답</h3>
                    <div class="col-12 border" style="overflow: auto; max-height: 260px;">
                        <ul class="list-group">
                            @for(int i = 1; i <= 12; i++) {
                                <li class="list-group-item">질의응답 @i</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private ClassRoom? classRoom;
    private List<BoardContent>? contents;

    protected async override void OnInitialized() {
        // RoomId와 매칭되는 강의실의 정보를 가져옵니다.
        classRoom = await Http.GetFromJsonAsync<ClassRoom>($"api/classroom/{Id}");

        var notices = await Http.GetFromJsonAsync<List<Notice>>($"api/classroom/{Id}/notice/all");
        if (notices != null) {
            contents = new List<BoardContent>();
            foreach (var notice in notices) {
                this.contents.Add(new NoticeContent() {
                    room_id = notice.room_id,
                    content_id = notice.notice_id,
                    title = notice.title,
                    author = notice.author,
                    contents = notice.contents,
                    publish_date = notice.publish_date,
                    up_date = notice.up_date,
                    view_count = notice.view_count
                });
            }
            contents = contents.OrderByDescending(a => a.content_id).ToList();
            StateHasChanged();
        }
    }

    private void ShowContents(BoardContent boardContent) {
        NavigationManager.NavigateTo(NavigationManager.Uri + $"/notice/{boardContent.content_id}");
    }
}