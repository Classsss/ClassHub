@using Blazored.Modal
@using Blazored.Modal.Services
@using Newtonsoft.Json
<Modal>
    <ModalBody>
        <p style="font-weight: bold; margin-bottom: 0;">제출 코드</p>
        <textarea style="width: 100%; height: 200px;">@Code</textarea>
        <p style="font-weight: bold; margin-bottom: 0;">gpt의 조언</p>
        <pre><code>@Advice</code></pre>
    </ModalBody>
    <ModalFooter>
        <button class="btn btn-primary" @onclick="HandleClose">Close</button>
    </ModalFooter>
</Modal>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public string Code { get; set; }

    private string Advice { get; set; } = "GPT 조언 대기중..";

    private bool IsInitialized { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(async () =>
       {


           // api URI
           string apiUrl = "https://api.openai.com/v1/chat/completions";
           // OpenAI API Key
           string apiKey = "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";

           // 질문
           string question = Code;

           //보낼 질문 생성
           var messages = new[] {
                new { role = "system", content = "assistant는 코드의 오류나 아쉬운 부분 대한 설명을 해준다." },
                new { role = "user", content = question }};

           // HTTP 요청 객체 생성
           using (HttpClient client = new HttpClient())
           {
               // HTTP 요청 헤더에 API Key 추가
               client.DefaultRequestHeaders.Add("Authorization", $"Bearer {apiKey}");

               // HTTP 요청 바디에 데이터 추가
               string requestBody = JsonConvert.SerializeObject(new
               {
                   model = "gpt-3.5-turbo",
                   messages
               });


               var httpContent = new StringContent(requestBody, System.Text.Encoding.UTF8, "application/json");

               // OpenAI API에 HTTP POST 요청 전송
               HttpResponseMessage response = await client.PostAsync(apiUrl, httpContent);

               // HTTP 응답 바디에서 데이터 추출
               string responseString = await response.Content.ReadAsStringAsync();

               // JSON 데이터 파싱
               System.Text.Json.JsonDocument doc = System.Text.Json.JsonDocument.Parse(responseString);
               string output = doc.RootElement.GetProperty("choices")[0].GetProperty("message").GetProperty("content").ToString();
               string resultWithLineBreaks = output.Replace("'''", "\n");
               // 결과 출력
               Advice = output;
           }
       });
        await Task.Delay(1000); // Simulate an async operation
        IsInitialized = true;
    }
    private async Task HandleClose()
    {
        await ModalInstance.CloseAsync();
    }
}


 