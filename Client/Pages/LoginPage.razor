@page "/login"
@inject AuthenticationService AuthService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject NavMenuTitleService NavMenuTitleService
@inject SSOAuthenticationStateProvider authProvider
@using ClassHub.Client.Models;
@using ClassHub.Shared;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.JSInterop;
@using System.Text;
@using System.Text.Json

<AuthorizeView>
    <NotAuthorized>
        <div class="d-flex align-items-center justify-content-center" style="height: 100vh;">
            <button class="btn btn-primary" @onclick="Login">Login</button>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private void Login() {
        // TODO: 통합 로그인 페이지 이동 구현
        //AuthService.IsLoggedIn = true;
        NavigationManager.NavigateTo($"https://classhubsso.azurewebsites.net/login?client_id=classhub&redirect_uri={NavigationManager.BaseUri + "/login"}");
    }

    protected async override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if ((QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id)) && (QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var code)))
        {
            AuthService.IsLoggedIn = true;
            exchangeToken(id, code);
        }

        // 로컬 스토리지에서 AccessToken이 있는지 확인
        var accessToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");
        if (!string.IsNullOrEmpty(accessToken))
        {
            AuthService.IsLoggedIn = true;
            NavigationManager.NavigateTo(NavigationManager.BaseUri);
        }

        if (AuthService.IsLoggedIn == false) NavigationManager.NavigateTo("/login");

        NavMenuTitleService.Title = "ClassHub";
    }

    protected async Task exchangeToken(String id, String code)
    {
        var client = new HttpClient();
        client.BaseAddress = new Uri(NavigationManager.BaseUri);
        var request = new HttpRequestMessage(HttpMethod.Post, "TokenExchange/submit-code");
        Console.WriteLine(id + " " + code);
        request.Content = new StringContent(JsonSerializer.Serialize(new AccessTokenRequest { UserId = id, AuthorizationCode = code }), Encoding.UTF8, "application/json");
        try
        {
            var response = await client.SendAsync(request);
            var content = await response.Content.ReadAsStringAsync();
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", JsonSerializer.Deserialize<AccessTokenResponse>(content).AccessToken);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "refreshToken", JsonSerializer.Deserialize<AccessTokenResponse>(content).RefreshToken);
            authProvider.StateChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error during request: " + ex.Message);
        }
    }
}