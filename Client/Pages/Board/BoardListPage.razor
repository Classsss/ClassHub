@page "/classroom/{roomid:int}/notice"
@page "/classroom/{roomid:int}/lecturematerial"
@layout MainLayout
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using ClassHub.Client.Models
@using ClassHub.Client.Shared.Board
@using ClassHub.Shared
@using System.Text.RegularExpressions;

@if(contents == null) {
    <div class="d-flex justify-content-center mt-5">
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status" />
    </div>
} else {
    if (type == "notice")
    {
        <Board Title="공지사항" Contents="@contents" />
    }else if (type == "lecturematerial")
    {
        <Board Title="강의자료" Contents="@contents" />
    }
}

@code {
    [Parameter]
    public int RoomId { get; set; }

    private string type = "";

    private List<BoardContent> contents;

    protected override async Task OnInitializedAsync() {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) UpdateTypeAndContents();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e) {
        UpdateTypeAndContents();
    }

    private async void UpdateTypeAndContents() {
        string uri = NavigationManager.Uri;

        if (new Regex("/classroom/[0-9]+/notice").IsMatch(uri)) {
            Console.WriteLine("공지사항 목록");
            type = "notice";
        }
        else if (new Regex("/classroom/[0-9]+/lecturematerial").IsMatch(uri)) {
            Console.WriteLine("강의자료 목록");
            type = "lecturematerial";
        }

        if (type == "notice") {
            var notices = await Http.GetFromJsonAsync<List<Notice>>($"api/classroom/{RoomId}/notice/all");
            if (notices != null) {
                contents = new List<BoardContent>();
                foreach (var notice in notices) {
                    this.contents.Add(new NoticeContent() {
                        room_id = notice.room_id,
                        content_id = notice.notice_id,
                        title = notice.title,
                        author = notice.author,
                        contents = notice.contents,
                        publish_date = notice.publish_date,
                        up_date = notice.up_date,
                        view_count = notice.view_count
                    });
                }
            }
        } else if (type == "lecturematerial") {
            var materials = await Http.GetFromJsonAsync<List<LectureMaterial>>($"api/classroom/{RoomId}/lecturematerial/all");
            if (materials != null) {
                contents = new List<BoardContent>();
                foreach (var material in materials) {
                    this.contents.Add(new LectureMaterialContent()
                        {
                            room_id = material.room_id,
                            week = material.week,
                            content_id = material.material_id,
                            title = material.title,
                            author = material.author,
                            contents = material.contents,
                            publish_date = material.publish_date,
                            up_date = material.up_date,
                            view_count = material.view_count
                        });
                }
            }
        }
        StateHasChanged();
    }
}


