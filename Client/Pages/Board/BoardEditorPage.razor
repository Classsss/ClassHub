@page "/classroom/{roomid:int}/lecturematerial/edit"
@page "/classroom/{roomid:int}/lecturematerial/{contentid:int}/edit"
@page "/classroom/{roomid:int}/notice/edit"
@page "/classroom/{roomid:int}/notice/{contentid:int}/edit"
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using ClassHub.Client.Models
@using ClassHub.Shared
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using System.Text;

@if(type == 0) {
    
} else {
    <div class="form-group">
        <label for="post-title" style="font-weight: bold;">제목</label>
        <input type="text" class="form-control" id="post-title" placeholder="제목을 입력하세요" @bind="@title">
    </div>
    <br />

    if(type == 1 || type == 2) {
        <WeekPicker weekValue="@selectedWeek" ValueChanged="OnWeekChanged" allowMultipleSelection=false />
        <br />
    }

    <div class="form-group">
        <label for="post-content" style="font-weight: bold;">내용</label>
        <textarea class="form-control" id="post-content" rows="10" placeholder="내용을 입력하세요" @bind="@contents"></textarea>
    </div>

    if(type == 1 || type == 2) {
        <DragDropUpload />        
    }

    <br />
    <div class="d-flex justify-content-between mb-2">
        <button class="btn btn-success" @onclick="@(()=>OpenDetail())">이전</button>
        <button type="submit" class="btn btn-primary" @onclick="RegisterContent">등록</button>
    </div>
}

@code {
    [Parameter]
    public int RoomId { get; set; }
    [Parameter]
    public int ContentId { get; set; }

    /// <summary>
    /// 1 - 강의자료 수정, 2 - 공지사항 수정, 3 - 강의자료 게시, 4 - 공지사항 게시
    /// </summary>
    private int type = 0;
    private BoardContent targetBoardContent;
    private string title;
    private string contents;

    public List<int> selectedWeek = new List<int>() { 1, };

    private List<LectureMaterialContent> lec_mat = new List<LectureMaterialContent> {
        new LectureMaterialContent {content_id = 1, week = 1, title = "강의자료1", contents = "이것은 내용 1" , author = "조민경", publish_date = new DateTime(2023, 03, 03, 09, 02, 0), view_count = 54 },
        new LectureMaterialContent {content_id = 2, week = 2, title = "강의자료2", contents = "이것은 내용 2" , author = "조민경", publish_date = new DateTime(2023, 03, 05, 09, 02, 0), view_count = 31 },
        new LectureMaterialContent {content_id = 3, week = 3, title = "강의자료3", contents = "이것은 내용 3" , author = "조민경", publish_date = new DateTime(2023, 03, 10, 09, 02, 0), view_count = 43 },
        new LectureMaterialContent {content_id = 4, week = 3, title = "강의자료4", contents = "이것은 내용 4" , author = "조민경", publish_date = new DateTime(2023, 03, 12, 09, 02, 0), view_count = 81 },
        new LectureMaterialContent {content_id = 5, week = 4, title = "강의자료5", contents = "이것은 내용 5" , author = "조민경", publish_date = new DateTime(2023, 03, 17, 09, 02, 0), view_count = 17 },
    };

    protected override void OnParametersSet() // OninitializedAsync()를 대체함
    {
        string uri = NavigationManager.Uri;
        if (new Regex("/classroom/[0-9]+/lecturematerial/[0-9]+/edit").IsMatch(uri)) {
            Console.WriteLine("강의자료 수정");
            type = 1;
            // TODO: 수정 해야 하는 강의자료의 정보를 불러옵니다

            // 우선 임시로 함
            targetBoardContent = lec_mat[ContentId - 1];
            title = targetBoardContent.title;
            contents = targetBoardContent.contents;
        } else if (new Regex("/classroom/[0-9]+/lecturematerial/edit").IsMatch(uri)) {
            Console.WriteLine("강의자료 게시");
            type = 2;
        } else if (new Regex("/classroom/[0-9]+/notice/[0-9]+/edit").IsMatch(uri)) {
            Console.WriteLine("공지사항 수정");
            type = 3;
            // TODO: 수정 해야 하는 공지사항의 정보를 불러옵니다

            // 우선 임시로 함
            targetBoardContent = lec_mat[ContentId - 1];
            title = targetBoardContent.title;
            contents = targetBoardContent.contents;
        } else if (new Regex("/classroom/[0-9]+/notice/edit").IsMatch(uri)) {
            type = 4;
            Console.WriteLine("공지사항 게시");
        } else {
            type = -1;
            Console.WriteLine("예상하지 못한 접근 경로");
        }
    }

    private void OpenDetail() {
        NavigationManager.NavigateTo(NavigationManager.Uri.Substring(0, NavigationManager.Uri.LastIndexOf("/")));
    }

    private void OpenList() {
        NavigationManager.NavigateTo(NavigationManager.Uri.Substring(0, NavigationManager.Uri.LastIndexOf("/")));
    }

    private async void RegisterContent() {
        string jsonString = "";
        string requestUri = "";
        if(type == 1) {
            // 강의자료 수정
            jsonString = JsonSerializer.Serialize(new LectureMaterial {
                room_id = RoomId,
                material_id = ContentId,
                week = selectedWeek[0],
                title = title,
                author = targetBoardContent.author,
                contents = contents,
                publish_date = targetBoardContent.publish_date,
                up_date = DateTime.Now,
                view_count = targetBoardContent.view_count
            });
            requestUri = "/api/classroom/modify/lecturematerial";
        } else if(type == 2) {
            // 강의자료 게시
            jsonString = JsonSerializer.Serialize(new LectureMaterial {
                room_id = RoomId,
                week = selectedWeek[0],
                title = title,
                author = "Issue-155",
                contents = contents,
                publish_date = DateTime.Now,
                up_date = DateTime.Now,
                view_count = 0
            });
            requestUri = "/api/classroom/register/lecturematerial";
        } else if(type == 3) {
            // 공지사항 수정
            jsonString = JsonSerializer.Serialize(new Notice {
                room_id = RoomId,
                notice_id = ContentId,
                title = title,
                author = targetBoardContent.author,
                contents = contents,
                publish_date = targetBoardContent.publish_date,
                up_date = DateTime.Now,
                view_count = targetBoardContent.view_count
            });
            requestUri = "/api/classroom/modify/notice";
        } else if(type == 4) {
            // 공지사항 게시
            jsonString = JsonSerializer.Serialize(new Notice {
                room_id = RoomId,
                title = title,
                author = "Issue-155",
                contents = contents,
                publish_date = DateTime.Now,
                up_date = DateTime.Now,
                view_count = 0
            });
            requestUri = "/api/classroom/register/notice";
        }
        HttpContent httpContent = new StringContent(jsonString, Encoding.UTF8, "application/json");
        if(type == 1 || type == 3) await Http.PutAsync(requestUri, httpContent);
        else await Http.PostAsync(requestUri, httpContent);

        // 목록 또는 게시글 페이지로 돌아감
        NavigationManager.NavigateTo(NavigationManager.Uri.Substring(0, NavigationManager.Uri.LastIndexOf("/")));
    }

    private async Task OnWeekChanged(List<int> week)
    {
        selectedWeek = week;
        Console.WriteLine(selectedWeek[0]);
        await Task.CompletedTask;
    }
}
