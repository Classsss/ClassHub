@using System
@using Blazored.Modal
@using Blazored.Modal.Services
@using ClassHub.Client.Models;
@using System.Text.Json;
@using System.Text;
@using System.Net.Http.Json
@using ClassHub.Shared;

@inject IJSRuntime JSRuntime
@inject HttpClient Http
<style>
     .attachment-item:hover span {
        color: blue;
        cursor: pointer;
    }
</style>

<Modal>
    <ModalBody>
          @if (!dataLoaded) {
    <LoadingBar />
} else {
        <div class="p-3 border-4 rounded-3" style="background-color: #F7F7F7;">
            <div class="form-group mb-4">
                <label for="title" class="mb-2">평가</label>
                <textarea class="form-control" id="title" name="title" required @bind="@message" rows="8"></textarea>
            </div>
            <div class="form-group">
                <label for="score">점수</label>
                <input type="number" class="form-control" id="score" name="score" @bind="score" />
            </div>
        </div>
        }

    </ModalBody>
    <ModalFooter>
        <div style="margin-top: 2em;">
            <button class="btn btn-danger" @onclick="HandleClose">닫기</button>
            <button class="btn btn-success" @onclick="() => putScore()">채점</button>
        </div>
    </ModalFooter>
</Modal>



@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] 
    public AssignmentSubmit assignmentSubmit{ get; set; }

    private List<AssignmentSubmitAttachment> submitAttachments = new List<AssignmentSubmitAttachment>();
    int score;
    string message;
    bool dataLoaded = false;
    protected override async Task OnInitializedAsync() {
        submitAttachments = await Http.GetFromJsonAsync<List<AssignmentSubmitAttachment>>($"api/assignmentsubmit/attachments?room_id={assignmentSubmit.room_id}&submit_id={assignmentSubmit.submit_id}");
        score = assignmentSubmit.score;
        message = assignmentSubmit.message;
        dataLoaded = true;
        StateHasChanged();
    }

    // 점수를 넣는다.
    private async void putScore() {
        Console.WriteLine(message);
        await Http.PutAsync($"api/assignmentsubmit/{assignmentSubmit.submit_id}/score/{score}/message/{message}", null);
        await JSRuntime.InvokeVoidAsync("alert", "점수 수정완료하였습니다!");
        await ModalInstance.CloseAsync(ModalResult.Ok());
    }

    // 파일 다운창을 종료한다.
    private async Task HandleClose(){
        await ModalInstance.CloseAsync(ModalResult.Cancel());
    }

}


 