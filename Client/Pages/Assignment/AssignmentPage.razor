@page "/classroom/{roomid:int}/assignment/{assignmentid:int}"
@layout MainLayout
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using ClassHub.Shared
@using ClassHub.Client.Models
@using System.Text.Json;
@using System.Text;
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
<style>
    .attachment-iconx:hover {
        color: red;
        cursor: pointer;
    }
     .attachment-item:hover span {
        color: blue;
        cursor: pointer;
    }

    .attachment-down:hover {
        color: blue;
        cursor: pointer;
    }
</style>

<BackButton />
@if (!dataLoaded) {
    <LoadingBar />
} else {
<div style="background-color: whitesmoke; padding: 1rem; border-top:2px solid black; border-bottom: 1px solid grey">
    <h1>
        <span class="oi oi-bullhorn" aria-hidden="true" style="margin-right: 10px;"></span>
        @assignment.Title
    </h1>
</div>
<div>
    <div style="display: flex; align-items: center; justify-content: space-between; ">
        <div style="display: flex; align-items: center;">
            <div style="margin-right: 50px; display: flex; align-items: center; height: 100%;">
                <p style="margin: 0;">작성자: @assignment.Author</p>
            </div>
        </div>
        <div style="display: flex; align-items: center;">
            <div style="margin-right: 20px;">
                <div>시작일: @assignment.StartDate.ToString("yyyy.MM.dd HH:mm")</div>
                <div>마감일: @assignment.EndDate.ToString("yyyy.MM.dd HH:mm")</div>
            </div>
        </div>
    </div>
    <hr style="margin-top: 0; border: 0; border-top: solid 1px grey;">
    <div style="padding-bottom: 2em;">@((MarkupString)assignment.Description)</div>
    <hr style="margin-top: 0; border: 0; border-top: solid 1px grey;">
    <h1 style="font-size: 1.2em; font-weight: bold;"><i class="bi bi-file-earmark"></i> 첨부 파일 목록:</h1>   
    <ul class="attachment-list">            
    @if(assignmentAttachments != null){
        @foreach (var attachment in assignmentAttachments) {
            <li class="attachment-item" @onclick="() => DownloadFile(attachment.file_url)">
                <span class="attachment-icon oi oi-file" aria-hidden="true"></span>
                <span>@(attachment.file_name.Substring(attachment.file_name.IndexOf('/', 2) + 1))</span>
                <span style="margin-left: 10px;">(@(attachment.file_size.ToString("0.##")) KB)</span>
                <span class="attachment-date">@attachment.update</span>
            </li>
        }
     }
    </ul>    
    <hr />
</div>
<div style="font-weight:bold; color:#2E3494"><i class="oi oi-file"/>@(" " + "과제제출")</div>
@if (role == "student") {
    @if(assignmentSubmit.submit_id==0) {
        <div class="p-3 border-4 rounded-3" style="background-color: #F7F7F7;">
            <div class="text-black fw-bold mb-2">미제출</div>
            @if ((assignment.EndDate < TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Asia/Seoul")) || (assignment.StartDate > TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Asia/Seoul"))))) {
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div class="text-black fw-bold mb-2">제출 기한이 아닙니다.</div>
                    <div class="text-black mb-3" style="margin-top: 1em;">점수 : @assignmentSubmit.score</div>
                </div>
            } else {
                <DragDropUpload @bind-droppedFiles="uploadFileList" IsMultiple=true />
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div class="text-black mb-3" style="margin-top: 1em;">점수 : @assignmentSubmit.score</div>
                <button class="btn btn-warning" style="margin-top: 1em;" @onclick="@(()=>Submit())" >제출</button>
            </div>
            }
        </div>
    } else {
        <div class="p-3 border-4 rounded-3" style="background-color: #F7F7F7;">
            <div class="text-black mb-3">최종 제출 일: @(assignmentSubmit.submit_date)</div>
            <ul class="attachment-list">
                @foreach (var attachment in submitAttachments) {
                    <li class="attachment">
                        <span class="attachment-icon oi oi-file" aria-hidden="true"></span>
                        <span class="attachment-down" @onclick="() => DownloadFile(attachment.file_url)">
                            @(attachment.file_name.Split('/').Skip(3).FirstOrDefault() ?? attachment.file_name)
                        </span>
                        <span style="margin-left: 10px;">(@(attachment.file_size.ToString("0.##")) KB)</span>
                        <span class="attachment-date">@attachment.update</span>
                        @if (assignment.EndDate > TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Asia/Seoul"))){
                            <span class="attachment-iconx"><i class="bi bi-x" @onclick="() => excludeFile(attachment)"></i></span>
                        }
                    </li>
                }
            </ul>
            @if ((assignment.EndDate < TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Asia/Seoul")) || (assignment.StartDate > TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Asia/Seoul"))))) {
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div class="text-black fw-bold mb-2">제출 기한이 아닙니다.</div>
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div class="text-black mb-3" style="margin-top: 1em;">점수 : (@assignmentSubmit.score)</div>
                    </div>
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div class="text-black mb-3">교수 평가</div>
                    </div>
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <input class="form-control" type="text" placeholder=@assignmentSubmit.message readonly>
                    </div>
                </div>
            } else {
                <DragDropUpload @bind-droppedFiles="uploadFileList" IsMultiple=true />
                <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1em">
                    <div class="text-black mb-3">교수 평가</div>
                </div>
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <textarea class="form-control" placeholder=@assignmentSubmit.message readonly></textarea>

                </div>
                <div style="display: flex; justify-content: space-between; align-items: center;  margin-top: 1em">
                    <div class="text-black mb-3">점수 : (@assignmentSubmit.score)</div>
                    <button class="btn btn-warning" @onclick="@(()=>ModifySubmit())">제출 파일 수정</button>
                </div>
            }
        </div>
    }
} 
<div class="d-flex align-items-center justify-content-between mb-2" style="margin-top: 1em;">
    <AuthorizeView Roles="professor">
        <div>
            <button class="btn btn-warning" @onclick="Modify">수정</button>
            <button class="btn btn-warning" @onclick="Delete">삭제</button>
            <button class="btn btn-warning" @onclick="@(()=>ShowSubmitPage())">과제 제출 내역</button>
        </div>
    </AuthorizeView>
    <button class="btn btn-primary" @onclick="GoBack">목록</button>
</div>
}


@code {
    [Parameter]
    public int RoomId { get; set; }
    [Parameter]
    public int AssignmentId { get; set; }

    private List<IBrowserFile> uploadFileList = new List<IBrowserFile>();
    private List<AssignmentMaterialAttachment>? assignmentAttachments = new List<AssignmentMaterialAttachment>();
    private List<AssignmentSubmitAttachment>? submitAttachments = new List<AssignmentSubmitAttachment>();
    private List<AssignmentSubmitAttachment> excludeAttachments = new List<AssignmentSubmitAttachment>();
    private Models.Assignment assignment = new Models.Assignment();
    private AssignmentSubmit assignmentSubmit = new AssignmentSubmit();
    private string role;
    bool dataLoaded = false;
    protected override async Task OnInitializedAsync() {
        role = await UserInfo.GetRoleAsync(JSRuntime);
        assignment = await Http.GetFromJsonAsync<Models.Assignment>($"api/assignment/room_id/{RoomId}/assignment_id/{AssignmentId}/student_id/{await UserInfo.GetUserIdAsync(JSRuntime)}");
        assignmentSubmit = await Http.GetFromJsonAsync<AssignmentSubmit>($"api/assignmentsubmit/room_id/{RoomId}/assignment_id/{AssignmentId}/student_id/{await UserInfo.GetUserIdAsync(JSRuntime)}");
        dataLoaded = true;
        StateHasChanged();
        LoadAttachments();
    }


    // 과제 제출 내역 페이지를 을 띄운다.
    private async Task ShowSubmitPage() {
        NavigationManager.NavigateTo(NavigationManager.Uri + "/submit");
    }

    // 뒤로 돌아간다.
    private void GoBack() {
        NavigationManager.NavigateTo(NavigationManager.Uri.Substring(0, NavigationManager.Uri.LastIndexOf("/")));
    }

    // 과제 파일을 삭제한다.
    private async void Delete(){
        bool confirmed = await JSRuntime.InvokeAsync<bool>("showConfirm", "게시글을 삭제하시겠습니까?", "삭제 후에는 복구할 수 없습니다.", "삭제");
        if (confirmed){
            // 서버와 연결해서 삭제 작업 수행
            await Http.DeleteAsync($"api/assignment/{RoomId}/removedb/{AssignmentId}");
            Http.DeleteAsync($"api/assignment/{RoomId}/removeblob/{AssignmentId}");
            await JSRuntime.InvokeVoidAsync("alert", "삭제 완료하였습니다!");
            NavigationManager.NavigateTo(NavigationManager.Uri.Substring(0, NavigationManager.Uri.LastIndexOf("/")));
        }
    }

    // 과제를 수정한다.
    private void Modify() {
        NavigationManager.NavigateTo(NavigationManager.Uri + $"/editor");
    }

    // Attachments 불러오기
    private async void LoadAttachments() {
        assignmentAttachments = await Http.GetFromJsonAsync<List<AssignmentMaterialAttachment>>($"api/assignment/attachments?room_id={RoomId}&assignment_id={AssignmentId}");
        submitAttachments = await Http.GetFromJsonAsync<List<AssignmentSubmitAttachment>>($"api/assignmentsubmit/attachments?room_id={RoomId}&submit_id={assignmentSubmit.submit_id}");
        StateHasChanged();
    }

    // 파일을 다운받는다
    private async void DownloadFile(string fileUrl) {
        var downloadUrl = fileUrl;
        Console.WriteLine($"downloadUrl: {downloadUrl}");
        await JSRuntime.InvokeVoidAsync("downloadFile", downloadUrl);
    }

    // 첨부파일에서 제외한다.(학생용)
    private async void excludeFile(AssignmentSubmitAttachment attachment) {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("showConfirm", "해당 파일을 첨부파일에서 삭제하시겠습니까?", "삭제 후 등록하려면 다시 등록해야합니다.", "삭제");
        if (confirmed) {
            submitAttachments.Remove(attachment);
            excludeAttachments.Add(attachment);
            StateHasChanged();
        }

    }

    // 과제를 제출한다.(학생용)
    private async Task Submit() {
        if (uploadFileList.Count == 0) {
            await JSRuntime.InvokeVoidAsync("alert", "파일을 업로드 해주세요."); return;
        }
        // 객체를 생성한다.
        var jsonString = JsonSerializer.Serialize(new AssignmentSubmit {
                assignment_id = AssignmentId,
                room_id = RoomId,
                student_id = await UserInfo.GetUserIdAsync(JSRuntime),
                student_name = await UserInfo.GetUserNameAsync(JSRuntime),
                submit_date = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Asia/Seoul")),
                score = 0,
                message = ""
            });
        HttpContent httpContent = new StringContent(jsonString, Encoding.UTF8, "application/json");
        // 전송한다
        var responsePost = await Http.PostAsync("/api/assignmentsubmit/register", httpContent);
        if (!responsePost.IsSuccessStatusCode) Console.WriteLine("과제 등록 실패");
        string json = await responsePost.Content.ReadAsStringAsync();
        int SubmitId = JsonSerializer.Deserialize<int>(json);

        // 첨부 파일을 서버로 전송 합니다
        var content = new MultipartFormDataContent();
        foreach (var file in uploadFileList) {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            content.Add(new ByteArrayContent(buffer), "files", $"{RoomId}/{AssignmentId}/{SubmitId}/{file.Name}");
        } 
        Http.PostAsync($"api/assignmentsubmit/{RoomId}/upload/{AssignmentId}/submitid/{SubmitId}", content);

        await JSRuntime.InvokeVoidAsync("alert", "과제 등록 완료하였습니다! 파일은 십여초 후에 등록됩니다.");
        NavigationManager.NavigateTo(NavigationManager.Uri.Substring(0, NavigationManager.Uri.LastIndexOf("/")));
    }

    // 과제 제출을 수정한다.(학생용)
    private async Task ModifySubmit() {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("showConfirm", "수정하시겠습니까?", "수정 사항은 되돌릴 수 없습니다.", "수정");
        if (!confirmed) {
            return;
        }
        if (uploadFileList.Count == 0 && submitAttachments.Count == 0) {
            await JSRuntime.InvokeVoidAsync("alert", "파일이 없습니다."); return;
        }
        // 수정할 객체를 생성한다.
        var jsonString = JsonSerializer.Serialize(new AssignmentSubmit {
                  assignment_id = assignmentSubmit.submit_id,
                  room_id = RoomId,
                  student_id = await UserInfo.GetUserIdAsync(JSRuntime),
                  student_name = await UserInfo.GetUserNameAsync(JSRuntime),
                  submit_date = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Asia/Seoul")),
                  score = assignmentSubmit.score,
                  message = ""
              });
        HttpContent httpContent = new StringContent(jsonString, Encoding.UTF8, "application/json");
        // 전송한다
        await Http.PutAsync($"/api/assignmentsubmit/{RoomId}/modifydb/{assignmentSubmit.submit_id}", httpContent);
        // 원래 첨부파일에서 삭제하는게 있을 때
        if (excludeAttachments.Count > 0) {
            foreach (AssignmentSubmitAttachment excludeAttachment in excludeAttachments) {
                Http.DeleteAsync($"api/assignmentsubmit/{RoomId}/removeblob/{AssignmentId}/submitid/{assignmentSubmit.submit_id}/filename/{excludeAttachment.file_name}");
                await Http.DeleteAsync($"api/assignmentsubmit/{RoomId}/removedb/submitid/{assignmentSubmit.submit_id}/AttachmentId/{excludeAttachment.attachment_id}");
            }
        }

        // 첨부 파일을 서버로 전송 합니다.
        var content = new MultipartFormDataContent();
        foreach (var file in uploadFileList) {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            content.Add(new ByteArrayContent(buffer), "files", $"{RoomId}/{AssignmentId}/{assignmentSubmit.submit_id}/{file.Name}");
        }
        Http.PostAsync($"api/assignmentsubmit/{RoomId}/upload/{AssignmentId}/submitid/{assignmentSubmit.submit_id}", content);

        await JSRuntime.InvokeVoidAsync("alert", "과제 수정 완료하였습니다! 파일은 십여초 후에 수정됩니다.");
        NavigationManager.NavigateTo(NavigationManager.Uri.Substring(0, NavigationManager.Uri.LastIndexOf("/")));
        
    }
}