@page "/classroom/{roomid:int}/notice/{noticeid:int}"
@layout MainLayout
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using ClassHub.Client.Models
@using ClassHub.Shared

<BackButton />
@if (noticeContent != null)
{
	<div style="min-height: 100vh;">
		<div class="d-flex flex-column justify-content-between">
			<div>
				<div style="background-color: whitesmoke; padding: 1rem; border-top:2px solid black; border-bottom: 1px solid grey">
					<h1>
						<span class="oi oi-bullhorn" aria-hidden="true" style="margin-right: 10px;"></span>
						@noticeContent.title
					</h1>
				</div>
				<div style="margin-top: 1rem; overflow: hidden; border-bottom : 1px solid grey; margin-bottom: 3rem;">
					<p style="float: left; margin-right: 50px;">작성자: @noticeContent.author</p>
					<div style="float: right;">
						<span class="oi oi-eye" aria-hidden="true"></span>
						<span style="margin-left: 5px;">@noticeContent.view_count</span>
						<span style="margin-left: 10px; margin-right: 10px;">|</span>
						<span class="oi oi-clock" aria-hidden="true"></span>
						@if (noticeContent.publish_date.Date == DateTime.Today)
						{ // 글이 올라온 시간이 오늘일 경우 시간만 표시
							<span style="margin-left: 5px;">@noticeContent.publish_date.ToString("tt hh:mm", new System.Globalization.CultureInfo("en-US"))</span>
						}
						else
						{ // 글이 올라온 시간이 오늘이 아닐 경우 날짜만 표시
							<span style="margin-left: 5px;">@noticeContent.publish_date.ToString("yyyy.MM.dd")</span>
						}
					</div>
				</div>
				<img src="@ImageUrl" style="margin-bottom: 15px;" />
				<div>@(
								(MarkupString)noticeContent.contents
								)</div> <!--보안에 취약?-->
				<hr />

				<style>
					ab {
					color: inherit;
					text-decoration: none;
					}

					ab:hover {
					background-color: lightblue;
					}

					/* 이미지도 최대 가로 너비 100%로 설정 */
					img {
					max-width: 100%;
					}
				</style>


				<div style="border-bottom: 1px solid grey; margin-bottom: 1rem;">
					<span class="oi oi-arrow-circle-top" aria-hidden="true"></span>
					<p style="display: inline-block; margin-right: 10px;">다음글</p>
					@if (nextnotice != null)
					{
						<ab href="@($"/classroom/{RoomId}/notice/{nextnotice.content_id}")" style="display: inline-block;">@nextnotice.title</ab>
						<span style="float: right; width: 150px; display: inline-block; text-align: right;">
							<span class="oi oi-clock" aria-hidden="true"></span>
							@if (nextnotice.publish_date.Date == DateTime.Today)
							{
								<span style="margin-left :5px; margin-right:11px;">@nextnotice.publish_date.ToString("tt hh:mm", new System.Globalization.CultureInfo("en-US"))</span>
							}
							else
							{
								<span style="margin-left :5px;">@nextnotice.publish_date.ToString("yyyy.MM.dd")</span>
							}
						</span>
					}
					else
					{
						<p style="display: inline-block;">다음글이 없습니다.</p>
					}
				</div>

				<div style="border-bottom: 1px solid grey;">
					<span class="oi oi-arrow-circle-bottom" aria-hidden="true"></span>
					<p style="display: inline-block; margin-right: 10px;">이전글</p>
					@if (prevnotice != null)
					{
						<ab href="@($"/classroom/{RoomId}/notice/{prevnotice.content_id}")" style="display: inline-block;">@prevnotice.title</ab>
						<span style="float: right; width: 150px; display: inline-block; text-align: right;">
							<span class="oi oi-clock" aria-hidden="true"></span>
							@if (prevnotice.publish_date.Date == DateTime.Today)
							{
								<span style="margin-left :5px; margin-right:11px;">@prevnotice.publish_date.ToString("tt hh:mm", new System.Globalization.CultureInfo("en-US"))</span>
							}
							else
							{
								<span style="margin-left :5px;">@prevnotice.publish_date.ToString("yyyy.MM.dd")</span>
							}
						</span>
					}
					else
					{
						<p style="display: inline-block;">이전글이 없습니다.</p>
					}
				</div>

			</div>

			<br />
			<div class="d-flex align-items-center justify-content-between mb-2">
				<AuthorizeView Roles="professor">
					<div>
						<button class="btn btn-warning" @onclick="Modify">수정</button>
						<button class="btn btn-warning">삭제</button>
					</div>
				</AuthorizeView>
				<button class="btn btn-primary" @onclick="GoBack">목록</button>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public int RoomId { get; set; }
	[Parameter]
	public int NoticeId { get; set; }

	private string ImageUrl = "/images/banner.png";

	// TODO: 공지사항을 불러옵니다
	private NoticeContent noticeContent;

	// 이전, 공지사항 구현용 서버에서 데이터를 가져올 경우 삭제
	private List<NoticeContent> noticeContents;

	private int index;
	private NoticeContent? prevnotice;
	private NoticeContent? nextnotice;

	private void GoBack() // 목록으로 돌아가는 클래스
	{
		NavigationManager.NavigateTo(NavigationManager.Uri.Substring(0, NavigationManager.Uri.LastIndexOf("/")));
	}

	private NoticeContent? GetPreviousnotice() // 이전 공지사항을 받아옴
	{
		return index-1 >= 0 ? noticeContents[index - 1] : null;
	}

	private NoticeContent? GetNextnotice() // 다음 공지사항을 받아옴
	{
		return index+1 < noticeContents.Count ? noticeContents[index + 1] : null;
	}

	protected override async Task OnInitializedAsync()
	{
		// TODO: 실제 프로젝트에서는 서버로부터 데이터를 가져옴
		
	}

	protected override async Task OnParametersSetAsync() {
		// TODO: 공지사항이 도중에 삭제되는 경우를 고려하여 공지사항 리스트를 다시 로딩하고 index값을 조정하는 작업이 필요함.
		await LoadnoticeData();
		index = noticeContents.FindIndex(a => a.content_id == NoticeId);

		if(index >= noticeContents.Count) {
			// 마지막 바로 전 공지사항을 보고 있다가 다음글 기능을 통해 마지막 공지사항으로 이동했는데
			// 하필이면 그 사이에 마지막 공지사항이 삭제되어 리스트 범위를 초과하는 경우

			// Do Something
			return;
		}

		noticeContent = noticeContents[index];
		prevnotice = GetPreviousnotice();
		nextnotice = GetNextnotice();
	}

	private async Task LoadnoticeData() // 공지사항을 데이터를 불러오는 메서드
	{
		await base.OnInitializedAsync();
		noticeContents = new List<NoticeContent>();
		var notices = await Http.GetFromJsonAsync<List<Notice>>($"api/notice/{RoomId}");
		if (notices != null)
		{
			foreach (var notice in notices)
			{
				this.noticeContents.Add(new NoticeContent()
					{
						room_id = notice.room_id,
						content_id = notice.notice_id,
						title = notice.title,
						author = notice.author,
						contents = notice.contents,
						publish_date = notice.publish_date,
						up_date = notice.up_date,
						view_count = notice.view_count
					});
				// if (notice.notice_id == NoticeId) noticeContent = noticeContents.LastOrDefault();
			}
		}
		StateHasChanged();
	}

	private void Modify() {
		NavigationManager.NavigateTo(NavigationManager.Uri + $"/edit");
	}
}
